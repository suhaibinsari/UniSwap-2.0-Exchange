{"ast":null,"code":"import detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nimport { isWebSocketProvider } from './isWebSocketProvider';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getInjectedProvider(getPollingInterval) {\n  var _a;\n  if (!window.ethereum) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n  const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n  const injectedProvider = (_a = injectedProviders.find(provider => {\n    var _a;\n    return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n  })) !== null && _a !== void 0 ? _a : await detectEthereumProvider();\n  if (!injectedProvider) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n  const provider = new providers.Web3Provider(injectedProvider, 'any');\n  const chainId = await provider.send('eth_chainId', []);\n  if (!isWebSocketProvider(provider)) {\n    provider.pollingInterval = getPollingInterval(chainId);\n  }\n  return provider;\n}","map":{"version":3,"sources":["../../../../src/helpers/injectedProvider.ts"],"names":[],"mappings":"AAAA,OAAO,sBAAsB,MAAM,2BAA2B;AAC9D,SAAS,SAAS,QAAQ,QAAQ;AAClC,SAAS,mBAAmB,QAAQ,uBAAuB;AAE3D,MAAM,iBAAiB,GAAG,mCAAmC;AAE7D,OAAO,eAAe,mBAAmB,CAAC,kBAAgD,EAAA;;EACxF,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;IACpB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAC9B,OAAO,SAAS;EACjB;EAED,MAAM,iBAAiB,GAAU,CAAC,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,QAAgB,EAAC,SAAS,IAAI,EAAE;EAC1E,MAAM,gBAAgB,GACpB,CAAA,EAAA,GAAA,iBAAiB,CAAC,IAAI,CAAE,QAAQ,IAAI;;IAClC,OAAO,CAAA,EAAA,GAAA,QAAQ,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,KAAK;EACrC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAK,MAAM,sBAAsB,EAAG;EAExC,IAAI,CAAC,gBAAgB,EAAE;IACrB,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAC9B,OAAO,SAAS;EACjB;EAED,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,gBAAgB,EAAE,KAAK,CAAC;EACpE,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;EACtD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE;IAClC,QAAQ,CAAC,eAAe,GAAG,kBAAkB,CAAC,OAAO,CAAC;EACvD;EACD,OAAO,QAAQ;AACjB","sourceRoot":"","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport { providers } from 'ethers';\nimport { isWebSocketProvider } from './isWebSocketProvider';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getInjectedProvider(getPollingInterval) {\n    var _a;\n    if (!window.ethereum) {\n        window.open(GET_METAMASK_LINK);\n        return undefined;\n    }\n    const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n    const injectedProvider = (_a = injectedProviders.find((provider) => {\n        var _a;\n        return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n    })) !== null && _a !== void 0 ? _a : (await detectEthereumProvider());\n    if (!injectedProvider) {\n        window.open(GET_METAMASK_LINK);\n        return undefined;\n    }\n    const provider = new providers.Web3Provider(injectedProvider, 'any');\n    const chainId = await provider.send('eth_chainId', []);\n    if (!isWebSocketProvider(provider)) {\n        provider.pollingInterval = getPollingInterval(chainId);\n    }\n    return provider;\n}\n//# sourceMappingURL=injectedProvider.js.map"]},"metadata":{},"sourceType":"module"}