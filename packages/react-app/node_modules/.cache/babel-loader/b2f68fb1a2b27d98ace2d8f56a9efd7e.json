{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useReducer } from 'react';\nimport pickBy from 'lodash.pickby';\nimport { DEFAULT_CONFIG } from '../../model/config/default';\nimport { ConfigContext } from './context';\nimport { configReducer } from './reducer';\n/**\n * We strip supplied config of undefined fields because it can easily break TS assumptions.\n *\n * Illustrative example:\n *\n * type FullConf = { something: string }\n * type PartConf = Partial<FullConf>\n *\n * const defaultConf: FullConf = { something: 'default' }\n * const suppliedConf: PartConf = { something: undefined }\n * const conf: FullConf = {...defaultConf, ...suppliedConf}\n * conf.something.toString() // OK according to TS, breaks on runtime.\n */\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nconst noUndefined = x => x !== undefined;\nexport function ConfigProvider(_ref) {\n  let {\n    config,\n    children\n  } = _ref;\n  var _a;\n  const configWithDefaults = Object.assign(Object.assign(Object.assign({}, DEFAULT_CONFIG), pickBy(config, noUndefined)), {\n    bufferGasLimitPercentage: undefined,\n    gasLimitBufferPercentage: (_a = config.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : config.bufferGasLimitPercentage,\n    notifications: Object.assign(Object.assign({}, DEFAULT_CONFIG.notifications), pickBy(config.notifications, noUndefined))\n  });\n  const [reducedConfig, dispatch] = useReducer(configReducer, configWithDefaults);\n  return _jsx(ConfigContext.Provider, {\n    value: {\n      config: reducedConfig,\n      updateConfig: dispatch\n    },\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../src/providers/config/provider.tsx"],"names":[],"mappings":";AAAA,SAAoB,UAAU,QAAQ,OAAO;AAC7C,OAAO,MAAM,MAAM,eAAe;AAElC,SAAS,cAAc,QAAQ,4BAA4B;AAC3D,SAAS,aAAa,QAAQ,WAAW;AACzC,SAAS,aAAa,QAAQ,WAAW;AAOzC;;;;;;;;;;;;AAYG;AAEH;;AAEG;AACH,MAAM,WAAW,GAAI,CAAM,IAAK,CAAC,KAAK,SAAS;AAC/C,OAAM,SAAU,cAAc,OAA0C;EAAA,IAAzC;IAAE,MAAM;IAAE;EAAQ,CAAuB;;EACtE,MAAM,kBAAkB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACnB,cAAc,CAAA,EACd,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAA,EAAA;IAC9B,wBAAwB,EAAE,SAAS;IACnC,wBAAwB,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,wBAAwB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,MAAM,CAAC,wBAAwB;IAC5F,aAAa,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACR,cAAc,CAAC,aAAa,CAAA,EAC5B,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,WAAW,CAAC;EAAA,CAAA,CAE/C;EACD,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC,GAAG,UAAU,CAAC,aAAa,EAAE,kBAAkB,CAAC;EAC/E,OAAO,IAAA,CAAC,aAAa,CAAC,QAAQ,EAAA;IAAC,KAAK,EAAE;MAAE,MAAM,EAAE,aAAa;MAAE,YAAY,EAAE;IAAQ,CAAE;IAAE,QAAQ,EAAE;EAAQ,CAAA,CAAI;AACjH","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useReducer } from 'react';\nimport pickBy from 'lodash.pickby';\nimport { DEFAULT_CONFIG } from '../../model/config/default';\nimport { ConfigContext } from './context';\nimport { configReducer } from './reducer';\n/**\n * We strip supplied config of undefined fields because it can easily break TS assumptions.\n *\n * Illustrative example:\n *\n * type FullConf = { something: string }\n * type PartConf = Partial<FullConf>\n *\n * const defaultConf: FullConf = { something: 'default' }\n * const suppliedConf: PartConf = { something: undefined }\n * const conf: FullConf = {...defaultConf, ...suppliedConf}\n * conf.something.toString() // OK according to TS, breaks on runtime.\n */\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nconst noUndefined = (x) => x !== undefined;\nexport function ConfigProvider({ config, children }) {\n    var _a;\n    const configWithDefaults = Object.assign(Object.assign(Object.assign({}, DEFAULT_CONFIG), pickBy(config, noUndefined)), { bufferGasLimitPercentage: undefined, gasLimitBufferPercentage: (_a = config.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : config.bufferGasLimitPercentage, notifications: Object.assign(Object.assign({}, DEFAULT_CONFIG.notifications), pickBy(config.notifications, noUndefined)) });\n    const [reducedConfig, dispatch] = useReducer(configReducer, configWithDefaults);\n    return _jsx(ConfigContext.Provider, { value: { config: reducedConfig, updateConfig: dispatch }, children: children });\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}