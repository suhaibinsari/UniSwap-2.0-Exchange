{"ast":null,"code":"export const DEFAULT_OPTIONS = {\n  decimals: 0,\n  thousandSeparator: ',',\n  decimalSeparator: '.',\n  significantDigits: Infinity,\n  useFixedPrecision: false,\n  fixedPrecisionDigits: 0,\n  prefix: '',\n  suffix: ''\n};\nconst INPUT_REGEX = /^\\d*$/;\nexport function formatCurrency(options, value) {\n  if (!INPUT_REGEX.test(value)) {\n    throw new TypeError('Invalid input, decimal string expected.');\n  }\n  const number = formatNumber(options, value);\n  return [options.prefix, number, options.suffix].join('');\n}\nfunction formatNumber(options, value) {\n  const integer = getIntegerPart(value, options.decimals);\n  const thousands = splitThousands(integer, options.thousandSeparator);\n  const decimal = getDecimalPart(value, options.decimals);\n  const digits = options.useFixedPrecision ? toFixed(decimal, options.fixedPrecisionDigits) : toSignificant(decimal, integer.length, options.significantDigits);\n  return joinDecimals(thousands, digits, options.decimalSeparator);\n}\nfunction getIntegerPart(value, decimals) {\n  if (value.length <= decimals) {\n    return '0';\n  } else {\n    const fragment = value.substring(0, value.length - decimals);\n    return stripFrontZeroes(fragment);\n  }\n}\nfunction stripFrontZeroes(value) {\n  const stripped = value.replace(/^0+/, '');\n  return stripped || '0';\n}\nfunction splitThousands(value, separator) {\n  const count = value.length / 3;\n  const resultValue = value.split('');\n  for (let i = 1; i < count; i++) {\n    resultValue.splice(-4 * i + 1, 0, separator);\n  }\n  return resultValue.join('');\n}\nfunction getDecimalPart(value, decimals) {\n  if (value.length <= decimals) {\n    return value.padStart(decimals, '0');\n  } else {\n    return value.substring(value.length - decimals);\n  }\n}\nfunction joinDecimals(integer, decimals, separator) {\n  if (!decimals) {\n    return integer;\n  } else {\n    return `${integer}${separator}${decimals}`;\n  }\n}\nfunction toSignificant(decimal, integerLength, significantDigits) {\n  const length = significantDigits - integerLength;\n  if (length > decimal.length) {\n    return stripEndZeroes(decimal);\n  } else {\n    return stripEndZeroes(decimal.substring(0, length));\n  }\n}\nfunction stripEndZeroes(value) {\n  return value.replace(/0+$/, '');\n}\nfunction toFixed(decimal, fixedPrecisionDigits) {\n  if (fixedPrecisionDigits > decimal.length) {\n    return decimal.padEnd(fixedPrecisionDigits, '0');\n  } else {\n    return decimal.substring(0, fixedPrecisionDigits);\n  }\n}","map":{"version":3,"sources":["../../../../src/model/formatting.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export const DEFAULT_OPTIONS = {\n    decimals: 0,\n    thousandSeparator: ',',\n    decimalSeparator: '.',\n    significantDigits: Infinity,\n    useFixedPrecision: false,\n    fixedPrecisionDigits: 0,\n    prefix: '',\n    suffix: '',\n};\nconst INPUT_REGEX = /^\\d*$/;\nexport function formatCurrency(options, value) {\n    if (!INPUT_REGEX.test(value)) {\n        throw new TypeError('Invalid input, decimal string expected.');\n    }\n    const number = formatNumber(options, value);\n    return [options.prefix, number, options.suffix].join('');\n}\nfunction formatNumber(options, value) {\n    const integer = getIntegerPart(value, options.decimals);\n    const thousands = splitThousands(integer, options.thousandSeparator);\n    const decimal = getDecimalPart(value, options.decimals);\n    const digits = options.useFixedPrecision\n        ? toFixed(decimal, options.fixedPrecisionDigits)\n        : toSignificant(decimal, integer.length, options.significantDigits);\n    return joinDecimals(thousands, digits, options.decimalSeparator);\n}\nfunction getIntegerPart(value, decimals) {\n    if (value.length <= decimals) {\n        return '0';\n    }\n    else {\n        const fragment = value.substring(0, value.length - decimals);\n        return stripFrontZeroes(fragment);\n    }\n}\nfunction stripFrontZeroes(value) {\n    const stripped = value.replace(/^0+/, '');\n    return stripped || '0';\n}\nfunction splitThousands(value, separator) {\n    const count = value.length / 3;\n    const resultValue = value.split('');\n    for (let i = 1; i < count; i++) {\n        resultValue.splice(-4 * i + 1, 0, separator);\n    }\n    return resultValue.join('');\n}\nfunction getDecimalPart(value, decimals) {\n    if (value.length <= decimals) {\n        return value.padStart(decimals, '0');\n    }\n    else {\n        return value.substring(value.length - decimals);\n    }\n}\nfunction joinDecimals(integer, decimals, separator) {\n    if (!decimals) {\n        return integer;\n    }\n    else {\n        return `${integer}${separator}${decimals}`;\n    }\n}\nfunction toSignificant(decimal, integerLength, significantDigits) {\n    const length = significantDigits - integerLength;\n    if (length > decimal.length) {\n        return stripEndZeroes(decimal);\n    }\n    else {\n        return stripEndZeroes(decimal.substring(0, length));\n    }\n}\nfunction stripEndZeroes(value) {\n    return value.replace(/0+$/, '');\n}\nfunction toFixed(decimal, fixedPrecisionDigits) {\n    if (fixedPrecisionDigits > decimal.length) {\n        return decimal.padEnd(fixedPrecisionDigits, '0');\n    }\n    else {\n        return decimal.substring(0, fixedPrecisionDigits);\n    }\n}\n//# sourceMappingURL=formatting.js.map"]},"metadata":{},"sourceType":"module"}