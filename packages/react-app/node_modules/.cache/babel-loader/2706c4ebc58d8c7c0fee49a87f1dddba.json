{"ast":null,"code":"import { Contract } from 'ethers';\nimport { ERC20Interface } from '../constants';\nimport { useCall } from './useCall';\n/**\n * Returns a balance of a given token for a given address.\n * @param tokenAddress address of a token contract.\n * @param address address of an account.\n * @param queryParams see {@link QueryParams}.\n * @public\n * @returns a balance which is `BigNumber`, or `undefined` if address or token is `Falsy` or not connected.\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const { account } = useEthers()\n * const daiBalance = useTokenBalance(DAI_ADDRESS, account)\n *\n * return (\n *   {daiBalance && <p>Dai balance: {formatUnits(daiBalance, 18)} DAI</p>}\n * )\n */\nexport function useTokenBalance(tokenAddress, address) {\n  let queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  const {\n    value: tokenBalance\n  } = (_a = useCall(address && tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    method: 'balanceOf',\n    args: [address]\n  }, queryParams)) !== null && _a !== void 0 ? _a : {};\n  return tokenBalance === null || tokenBalance === void 0 ? void 0 : tokenBalance[0];\n}","map":{"version":3,"sources":["../../../../src/hooks/useTokenBalance.ts"],"names":[],"mappings":"AACA,SAAS,QAAQ,QAAQ,QAAQ;AACjC,SAAS,cAAc,QAAQ,cAAc;AAG7C,SAAS,OAAO,QAAQ,WAAW;AAEnC;;;;;;;;;;;;;;;AAeG;AACH,OAAM,SAAU,eAAe,CAC7B,YAA4B,EAC5B,OAAuB,EACM;EAAA,IAA7B,WAAA,uEAA2B,CAAA,CAAE;;EAE7B,MAAM;IAAE,KAAK,EAAE;EAAY,CAAE,GAC3B,CAAA,EAAA,GAAA,OAAO,CACL,OAAO,IACL,YAAY,IAAI;IACd,QAAQ,EAAE,IAAI,QAAQ,CAAC,YAAY,EAAE,cAAc,CAAC;IACpD,MAAM,EAAE,WAAW;IACnB,IAAI,EAAE,CAAC,OAAO;GACf,EACH,WAAW,CACZ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,CAAE;EACT,OAAO,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,YAAY,CAAG,CAAC,CAAC;AAC1B","sourceRoot":"","sourcesContent":["import { Contract } from 'ethers';\nimport { ERC20Interface } from '../constants';\nimport { useCall } from './useCall';\n/**\n * Returns a balance of a given token for a given address.\n * @param tokenAddress address of a token contract.\n * @param address address of an account.\n * @param queryParams see {@link QueryParams}.\n * @public\n * @returns a balance which is `BigNumber`, or `undefined` if address or token is `Falsy` or not connected.\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const { account } = useEthers()\n * const daiBalance = useTokenBalance(DAI_ADDRESS, account)\n *\n * return (\n *   {daiBalance && <p>Dai balance: {formatUnits(daiBalance, 18)} DAI</p>}\n * )\n */\nexport function useTokenBalance(tokenAddress, address, queryParams = {}) {\n    var _a;\n    const { value: tokenBalance } = (_a = useCall(address &&\n        tokenAddress && {\n        contract: new Contract(tokenAddress, ERC20Interface),\n        method: 'balanceOf',\n        args: [address],\n    }, queryParams)) !== null && _a !== void 0 ? _a : {};\n    return tokenBalance === null || tokenBalance === void 0 ? void 0 : tokenBalance[0];\n}\n//# sourceMappingURL=useTokenBalance.js.map"]},"metadata":{},"sourceType":"module"}