{"ast":null,"code":"import { encodeUint, bufPaddedLength, buffLength } from '../common';\nimport { ethersAbi, falseEncoded, trueEncoded } from './constants';\nconst selector = ethersAbi.getSighash('tryAggregate');\nexport function encodeCalls(start, calls) {\n  let res = start;\n  // the first offset is calls.length * 0x20 because the first\n  // item of a dynamic array starts after all offsets\n  let dynamicOffset = calls.length * 0x20;\n  // number of items in the array\n  res += encodeUint(calls.length);\n  for (const call of calls) {\n    // offset of the current call\n    res += encodeUint(dynamicOffset);\n    // offset for the next call - current offset\n    // + length of the current call\n    // + space taken by the current offset\n    // + the first item in the next tuple - address for the next call\n    // + space taken by the offset for the next call data\n    dynamicOffset += 3 * 0x20 + bufPaddedLength(call[1]);\n  }\n  for (const call of calls) {\n    // address + calldata offset\n    dynamicOffset = 0x40;\n    res += '000000000000000000000000' + call[0].slice(2).toLowerCase();\n    res += encodeUint(dynamicOffset);\n    // call data length\n    res += buffLength(call[1]).toString(16).padStart(64, '0');\n    // calldata\n    res += call[1].slice(2).padEnd(bufPaddedLength(call[1]) * 2, '0');\n  }\n  return res;\n}\nexport function encodeTryAggregate(b, calls) {\n  // function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public returns (tuple(bool success, bytes returnData)[])\n  let res = selector;\n  // offset of the array is 0x40 because we need to\n  // encode requireSuccess flag and the offset itself\n  const dynamicOffset = 0x40;\n  res += b ? trueEncoded : falseEncoded;\n  res += encodeUint(dynamicOffset);\n  // encode dynamic array of calls\n  return encodeCalls(res, calls);\n}","map":{"version":3,"sources":["../../../../../src/abi/multicall2/encoder.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,EAAE,eAAe,EAAE,UAAU,QAAQ,WAAW;AACnE,SAAS,SAAS,EAAE,YAAY,EAAE,WAAW,QAAQ,aAAa;AAElE,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,cAAc,CAAC;AAErD,OAAM,SAAU,WAAW,CAAC,KAAa,EAAE,KAAyB,EAAA;EAClE,IAAI,GAAG,GAAG,KAAK;EACf;EACA;EACA,IAAI,aAAa,GAAG,KAAK,CAAC,MAAM,GAAG,IAAI;EACvC;EACA,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC;EAC/B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;IACxB;IACA,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC;IAChC;IACA;IACA;IACA;IACA;IACA,aAAa,IAAI,CAAC,GAAG,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACrD;EAED,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;IACxB;IACA,aAAa,GAAG,IAAI;IACpB,GAAG,IAAI,0BAA0B,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;IAClE,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC;IAEhC;IACA,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC;IACzD;IACA,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;EAClE;EAED,OAAO,GAAG;AACZ;AAEA,OAAM,SAAU,kBAAkB,CAAC,CAAU,EAAE,KAAyB,EAAA;EACtE;EACA,IAAI,GAAG,GAAG,QAAQ;EAElB;EACA;EACA,MAAM,aAAa,GAAG,IAAI;EAC1B,GAAG,IAAI,CAAC,GAAG,WAAW,GAAG,YAAY;EACrC,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC;EAEhC;EACA,OAAO,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC;AAChC","sourceRoot":"","sourcesContent":["import { encodeUint, bufPaddedLength, buffLength } from '../common';\nimport { ethersAbi, falseEncoded, trueEncoded } from './constants';\nconst selector = ethersAbi.getSighash('tryAggregate');\nexport function encodeCalls(start, calls) {\n    let res = start;\n    // the first offset is calls.length * 0x20 because the first\n    // item of a dynamic array starts after all offsets\n    let dynamicOffset = calls.length * 0x20;\n    // number of items in the array\n    res += encodeUint(calls.length);\n    for (const call of calls) {\n        // offset of the current call\n        res += encodeUint(dynamicOffset);\n        // offset for the next call - current offset\n        // + length of the current call\n        // + space taken by the current offset\n        // + the first item in the next tuple - address for the next call\n        // + space taken by the offset for the next call data\n        dynamicOffset += 3 * 0x20 + bufPaddedLength(call[1]);\n    }\n    for (const call of calls) {\n        // address + calldata offset\n        dynamicOffset = 0x40;\n        res += '000000000000000000000000' + call[0].slice(2).toLowerCase();\n        res += encodeUint(dynamicOffset);\n        // call data length\n        res += buffLength(call[1]).toString(16).padStart(64, '0');\n        // calldata\n        res += call[1].slice(2).padEnd(bufPaddedLength(call[1]) * 2, '0');\n    }\n    return res;\n}\nexport function encodeTryAggregate(b, calls) {\n    // function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public returns (tuple(bool success, bytes returnData)[])\n    let res = selector;\n    // offset of the array is 0x40 because we need to\n    // encode requireSuccess flag and the offset itself\n    const dynamicOffset = 0x40;\n    res += b ? trueEncoded : falseEncoded;\n    res += encodeUint(dynamicOffset);\n    // encode dynamic array of calls\n    return encodeCalls(res, calls);\n}\n//# sourceMappingURL=encoder.js.map"]},"metadata":{},"sourceType":"module"}