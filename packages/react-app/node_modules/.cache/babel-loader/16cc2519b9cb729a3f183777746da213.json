{"ast":null,"code":"var _s = $RefreshSig$();\nimport Web3 from \"web3\";\nimport { useEffect, useState } from \"react\";\nimport { useConfig } from \"@usedapp/core\";\nimport { ROUTER_ADDRESS } from \"../config\";\nimport { getFactoryInfo, getRouterInfo } from \"../utils\";\nexport const loadPools = async providerUrl => {\n  const provider = new Web3.providers.HttpProvider(providerUrl);\n  const web3 = new Web3(provider);\n  const routerInfo = await getRouterInfo(ROUTER_ADDRESS, web3);\n  const factoryInfo = await getFactoryInfo(routerInfo.factory, web3);\n  return factoryInfo.pairsInfo;\n};\nexport const usePools = () => {\n  _s();\n  const {\n    readOnlyChainId,\n    readOnlyUrls\n  } = useConfig();\n  const [loading, setLoading] = useState(true);\n  const [pools, setPools] = useState({});\n  useEffect(() => {\n    loadPools(readOnlyUrls[readOnlyChainId]).then(pools => {\n      setPools(pools);\n      setLoading(false);\n    });\n  }, [readOnlyUrls, readOnlyChainId]);\n  return [loading, pools];\n};\n_s(usePools, \"/d0TO/9nu6wsTHb6WZVb4alfsQU=\", false, function () {\n  return [useConfig];\n});","map":{"version":3,"names":["Web3","useEffect","useState","useConfig","ROUTER_ADDRESS","getFactoryInfo","getRouterInfo","loadPools","providerUrl","provider","providers","HttpProvider","web3","routerInfo","factoryInfo","factory","pairsInfo","usePools","readOnlyChainId","readOnlyUrls","loading","setLoading","pools","setPools","then"],"sources":["/home/suhaibinsari/Documents/GitHub/uniSwap Exchange/packages/react-app/src/hooks/usePools.js"],"sourcesContent":["import Web3 from \"web3\";\nimport { useEffect, useState } from \"react\";\nimport { useConfig } from \"@usedapp/core\";\n\nimport { ROUTER_ADDRESS } from \"../config\";\nimport { getFactoryInfo, getRouterInfo } from \"../utils\";\n\nexport const loadPools = async (providerUrl) => {\n  const provider = new Web3.providers.HttpProvider(providerUrl);\n  const web3 = new Web3(provider);\n  const routerInfo = await getRouterInfo(ROUTER_ADDRESS, web3);\n  const factoryInfo = await getFactoryInfo(routerInfo.factory, web3);\n  return factoryInfo.pairsInfo;\n}\n\nexport const usePools = () => {\n  const { readOnlyChainId, readOnlyUrls } = useConfig();\n  const [loading, setLoading] = useState(true);\n  const [pools, setPools] = useState({});\n\n  useEffect(() => {\n    loadPools(readOnlyUrls[readOnlyChainId])\n        .then((pools) => {\n          setPools(pools);\n          setLoading(false);\n        });\n  }, [readOnlyUrls, readOnlyChainId]);\n\n  return [loading, pools];\n}\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,eAAe;AAEzC,SAASC,cAAc,QAAQ,WAAW;AAC1C,SAASC,cAAc,EAAEC,aAAa,QAAQ,UAAU;AAExD,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,MAAMC,QAAQ,GAAG,IAAIT,IAAI,CAACU,SAAS,CAACC,YAAY,CAACH,WAAW,CAAC;EAC7D,MAAMI,IAAI,GAAG,IAAIZ,IAAI,CAACS,QAAQ,CAAC;EAC/B,MAAMI,UAAU,GAAG,MAAMP,aAAa,CAACF,cAAc,EAAEQ,IAAI,CAAC;EAC5D,MAAME,WAAW,GAAG,MAAMT,cAAc,CAACQ,UAAU,CAACE,OAAO,EAAEH,IAAI,CAAC;EAClE,OAAOE,WAAW,CAACE,SAAS;AAC9B,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC,eAAe;IAAEC;EAAa,CAAC,GAAGhB,SAAS,EAAE;EACrD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdM,SAAS,CAACY,YAAY,CAACD,eAAe,CAAC,CAAC,CACnCM,IAAI,CAAEF,KAAK,IAAK;MACfC,QAAQ,CAACD,KAAK,CAAC;MACfD,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACR,CAAC,EAAE,CAACF,YAAY,EAAED,eAAe,CAAC,CAAC;EAEnC,OAAO,CAACE,OAAO,EAAEE,KAAK,CAAC;AACzB,CAAC;AAAA,GAdYL,QAAQ;EAAA,QACuBd,SAAS;AAAA"},"metadata":{},"sourceType":"module"}