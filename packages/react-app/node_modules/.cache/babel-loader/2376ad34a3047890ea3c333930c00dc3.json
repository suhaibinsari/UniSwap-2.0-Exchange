{"ast":null,"code":"import { ERC20Interface } from '../constants';\nimport { useCalls } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\nexport function useToken(tokenAddress) {\n  var _a, _b;\n  const partialCall = tokenAddress && {\n    contract: new Contract(tokenAddress, ERC20Interface),\n    address: tokenAddress,\n    args: []\n  };\n  const args = ['name', 'symbol', 'decimals', 'totalSupply'].map(method => partialCall && Object.assign(Object.assign({}, partialCall), {\n    method\n  }));\n  const [name, symbol, decimals, totalSupply] = useCalls(args);\n  if (!name && !symbol && !decimals && !totalSupply) {\n    return undefined;\n  }\n  return {\n    name: (_a = name === null || name === void 0 ? void 0 : name.value[0]) !== null && _a !== void 0 ? _a : '',\n    symbol: (_b = symbol === null || symbol === void 0 ? void 0 : symbol.value[0]) !== null && _b !== void 0 ? _b : '',\n    decimals: decimals === null || decimals === void 0 ? void 0 : decimals.value[0],\n    totalSupply: totalSupply === null || totalSupply === void 0 ? void 0 : totalSupply.value[0]\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useToken.ts"],"names":[],"mappings":"AAAA,SAAS,cAAc,QAAQ,cAAc;AAG7C,SAAe,QAAQ,QAAQ,WAAW;AAC1C,SAAS,QAAQ,QAAQ,QAAQ;AAEjC;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAM,SAAU,QAAQ,CAAC,YAA4B,EAAA;;EACnD,MAAM,WAAW,GAAG,YAAY,IAAI;IAClC,QAAQ,EAAE,IAAI,QAAQ,CAAC,YAAY,EAAE,cAAc,CAAC;IACpD,OAAO,EAAE,YAAY;IACrB,IAAI,EAAE;GACP;EACD,MAAM,IAAI,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,GAAG,CAC3D,MAAM,IAAmB,WAAW,IAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAS,WAAW,CAAA,EAAA;IAAE;EAAM,CAAA,CAAE,CACpE;EACD,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;EAE5D,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,IAAI,CAAC,WAAW,EAAE;IACjD,OAAO,SAAS;EACjB;EAED,OAAO;IACL,IAAI,EAAE,CAAA,EAAA,GAAA,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IAC1B,MAAM,EAAE,CAAA,EAAA,GAAA,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,KAAK,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IAC9B,QAAQ,EAAE,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,KAAK,CAAC,CAAC,CAAC;IAC5B,WAAW,EAAE,WAAW,KAAA,IAAA,IAAX,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAX,WAAW,CAAE,KAAK,CAAC,CAAC;GAClC;AACH","sourceRoot":"","sourcesContent":["import { ERC20Interface } from '../constants';\nimport { useCalls } from './useCall';\nimport { Contract } from 'ethers';\n/**\n * Returns name, symbol, decimals and token supply of a given token.\n * @param tokenAddress address of a token contract.\n * @returns a token info object (see {@link TokenInfo}) or `undefined` if all four methods don't exist on a token.\n * @public\n * @example\n * const DAI_ADDRESS = '0x6b175474e89094c44da98b954eedeac495271d0f'\n * const daiInfo = useToken(DAI_ADDRESS)\n *\n * return daiInfo ? (\n *   <>\n *     <p>Dai name: {daiInfo?.name}</p>\n *     <p>Dai symbol: {daiInfo?.symbol}</p>\n *     <p>Dai decimals: {daiInfo?.decimals}</p>\n *     <p>Dai totalSupply: {daiInfo?.totalSupply ? formatUnits(daiInfo?.totalSupply, daiInfo?.decimals) : ''}</p>\n *   </>\n * ) : null\n */\nexport function useToken(tokenAddress) {\n    var _a, _b;\n    const partialCall = tokenAddress && {\n        contract: new Contract(tokenAddress, ERC20Interface),\n        address: tokenAddress,\n        args: [],\n    };\n    const args = ['name', 'symbol', 'decimals', 'totalSupply'].map((method) => partialCall && Object.assign(Object.assign({}, partialCall), { method }));\n    const [name, symbol, decimals, totalSupply] = useCalls(args);\n    if (!name && !symbol && !decimals && !totalSupply) {\n        return undefined;\n    }\n    return {\n        name: (_a = name === null || name === void 0 ? void 0 : name.value[0]) !== null && _a !== void 0 ? _a : '',\n        symbol: (_b = symbol === null || symbol === void 0 ? void 0 : symbol.value[0]) !== null && _b !== void 0 ? _b : '',\n        decimals: decimals === null || decimals === void 0 ? void 0 : decimals.value[0],\n        totalSupply: totalSupply === null || totalSupply === void 0 ? void 0 : totalSupply.value[0],\n    };\n}\n//# sourceMappingURL=useToken.js.map"]},"metadata":{},"sourceType":"module"}