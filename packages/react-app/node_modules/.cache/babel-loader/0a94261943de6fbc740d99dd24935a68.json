{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { WindowContext } from './context';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function WindowProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [isActiveWindow, setActiveWindow] = useState(true);\n  useEffect(() => {\n    const visibilityChangeListener = () => {\n      switch (document.visibilityState) {\n        case 'hidden':\n          setActiveWindow(false);\n          break;\n        case 'visible':\n          setActiveWindow(true);\n          break;\n      }\n    };\n    document.addEventListener('visibilitychange', visibilityChangeListener);\n    return () => document.removeEventListener('visibilitychange', visibilityChangeListener);\n  }, []);\n  return _jsx(WindowContext.Provider, {\n    value: {\n      isActive: isActiveWindow\n    },\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../src/providers/window/provider.tsx"],"names":[],"mappings":";AAAA,SAAoB,QAAQ,EAAE,SAAS,QAAQ,OAAO;AACtD,SAAS,aAAa,QAAQ,WAAW;AAMzC;;AAEG;AACH,OAAM,SAAU,cAAc,OAAoB;EAAA,IAAnB;IAAE;EAAQ,CAAS;EAChD,MAAM,CAAC,cAAc,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;EAExD,SAAS,CAAC,MAAK;IACb,MAAM,wBAAwB,GAAG,MAAK;MACpC,QAAQ,QAAQ,CAAC,eAAe;QAC9B,KAAK,QAAQ;UACX,eAAe,CAAC,KAAK,CAAC;UACtB;QACF,KAAK,SAAS;UACZ,eAAe,CAAC,IAAI,CAAC;UACrB;MAAK;IAEX,CAAC;IACD,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,wBAAwB,CAAC;IACvE,OAAO,MAAM,QAAQ,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,wBAAwB,CAAC;EACzF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAA,CAAC,aAAa,CAAC,QAAQ,EAAA;IAAC,KAAK,EAAE;MAAE,QAAQ,EAAE;IAAc,CAAE;IAAE,QAAQ,EAAE;EAAQ,CAAA,CAAI;AAC5F","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useEffect } from 'react';\nimport { WindowContext } from './context';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function WindowProvider({ children }) {\n    const [isActiveWindow, setActiveWindow] = useState(true);\n    useEffect(() => {\n        const visibilityChangeListener = () => {\n            switch (document.visibilityState) {\n                case 'hidden':\n                    setActiveWindow(false);\n                    break;\n                case 'visible':\n                    setActiveWindow(true);\n                    break;\n            }\n        };\n        document.addEventListener('visibilitychange', visibilityChangeListener);\n        return () => document.removeEventListener('visibilitychange', visibilityChangeListener);\n    }, []);\n    return _jsx(WindowContext.Provider, { value: { isActive: isActiveWindow }, children: children });\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}