{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  var _a, _b, _c;\n  const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      let newState = action.state;\n      // merge with existing state\n      const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n      for (const [address, entries] of Object.entries(oldState)) {\n        newState = Object.assign(Object.assign({}, newState), {\n          [address]: Object.assign(Object.assign({}, entries), newState[address])\n        });\n      }\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: {\n          blockNumber: action.blockNumber,\n          state: newState\n        }\n      });\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), {\n          blockNumber: action.blockNumber,\n          error: action.error\n        })\n      });\n    }\n  }\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/chainStateReducer.ts"],"names":[],"mappings":"AAkCA;;AAEG;AACH,OAAM,SAAU,iBAAiB,GAA4C;EAAA,IAA3C,KAAA,uEAAe,CAAA,CAAE;EAAA,IAAE,MAAwB;;EAC3E,MAAM,OAAO,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW;EAClD,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC,WAAW,IAAI,OAAO,EAAE;IAC7C,IAAI,MAAM,CAAC,IAAI,KAAK,eAAe,EAAE;MACnC,IAAI,QAAQ,GAAG,MAAM,CAAC,KAAK;MAC3B;MACA,MAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,CAAE;MACnD,KAAK,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QACzD,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACH,QAAQ,CAAA,EAAA;UACX,CAAC,OAAO,GAAC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACJ,OAAO,CAAA,EACP,QAAQ,CAAC,OAAO,CAAC;QAAA,CAAA,CAEvB;MACF;MACD,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA;QACR,CAAC,MAAM,CAAC,OAAO,GAAG;UAAE,WAAW,EAAE,MAAM,CAAC,WAAW;UAAE,KAAK,EAAE;QAAQ;MAAE,CAAA,CAAA;KAEzE,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE;MACxC,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACK,KAAK,CAAA,EAAA;QACR,CAAC,MAAM,CAAC,OAAO,GAAC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA,EAAA;UAAE,WAAW,EAAE,MAAM,CAAC,WAAW;UAAE,KAAK,EAAE,MAAM,CAAC;QAAK,CAAA;MAAA,CAAA,CAAA;IAErG;EACF;EACD,OAAO,KAAK;AACd","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function chainStateReducer(state = {}, action) {\n    var _a, _b, _c;\n    const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n    if (!current || action.blockNumber >= current) {\n        if (action.type === 'FETCH_SUCCESS') {\n            let newState = action.state;\n            // merge with existing state\n            const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n            for (const [address, entries] of Object.entries(oldState)) {\n                newState = Object.assign(Object.assign({}, newState), { [address]: Object.assign(Object.assign({}, entries), newState[address]) });\n            }\n            return Object.assign(Object.assign({}, state), { [action.chainId]: { blockNumber: action.blockNumber, state: newState } });\n        }\n        else if (action.type === 'FETCH_ERROR') {\n            return Object.assign(Object.assign({}, state), { [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), { blockNumber: action.blockNumber, error: action.error }) });\n        }\n    }\n    return state;\n}\n//# sourceMappingURL=chainStateReducer.js.map"]},"metadata":{},"sourceType":"module"}