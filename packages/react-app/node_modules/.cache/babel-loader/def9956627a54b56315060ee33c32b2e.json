{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers, useBlockNumber } from '../hooks';\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\nexport function useRawLogs(filter) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    library\n  } = useEthers();\n  const providers = useReadonlyNetworks();\n  const _blockNumber = useBlockNumber();\n  const blockNumbers = useBlockNumbers();\n  const [logs, setLogs] = useState();\n  const {\n    chainId\n  } = queryParams;\n  const [provider, blockNumber] = useMemo(() => chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber], [providers, library, blockNumbers, _blockNumber, chainId]);\n  async function updateLogs() {\n    setLogs(!filter ? undefined : await (provider === null || provider === void 0 ? void 0 : provider.getLogs(filter)));\n  }\n  useEffect(() => {\n    void updateLogs();\n  }, [provider, blockNumber]);\n  return logs;\n}","map":{"version":3,"sources":["../../../../src/hooks/useRawLogs.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,EAAE,OAAO,EAAE,QAAQ,QAAQ,OAAO;AACpD,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,mBAAmB,QAAQ,uCAAuC;AAC3E,SAAS,eAAe,EAAE,cAAc,QAAQ,UAAU;AAK1D;;;;;;;;AAQG;AACH,OAAM,SAAU,UAAU,CACxB,MAAgF,EACnD;EAAA,IAA7B,WAAA,uEAA2B,CAAA,CAAE;EAE7B,MAAM;IAAE;EAAO,CAAE,GAAG,SAAS,EAAE;EAC/B,MAAM,SAAS,GAAG,mBAAmB,EAAE;EACvC,MAAM,YAAY,GAAG,cAAc,EAAE;EACrC,MAAM,YAAY,GAAG,eAAe,EAAE;EAEtC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,QAAQ,EAAqB;EAErD,MAAM;IAAE;EAAO,CAAE,GAAG,WAAW;EAE/B,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,OAAO,CACrC,MAAO,OAAO,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAE,EACvF,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,OAAO,CAAC,CAC1D;EAED,eAAe,UAAU,GAAA;IACvB,OAAO,CAAC,CAAC,MAAM,GAAG,SAAS,GAAG,OAAM,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,OAAO,CAAC,MAAM,CAAC,CAAA,CAAC;EAChE;EAEA,SAAS,CAAC,MAAK;IACb,KAAK,UAAU,EAAE;EACnB,CAAC,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;EAE3B,OAAO,IAAI;AACb","sourceRoot":"","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers, useBlockNumber } from '../hooks';\n/**\n * Returns all blockchain logs given a block filter.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * @see {@link useLogs} for a more easy-to-use version of the query.\n * @param filter an event filter, which blocks to query\n * @param queryParams allows for additional configuration of the query (see {@link QueryParams})\n * @returns an array of [logs](https://docs.ethers.io/v5/api/providers/types/#providers-Log)\n * @public\n */\nexport function useRawLogs(filter, queryParams = {}) {\n    const { library } = useEthers();\n    const providers = useReadonlyNetworks();\n    const _blockNumber = useBlockNumber();\n    const blockNumbers = useBlockNumbers();\n    const [logs, setLogs] = useState();\n    const { chainId } = queryParams;\n    const [provider, blockNumber] = useMemo(() => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]), [providers, library, blockNumbers, _blockNumber, chainId]);\n    async function updateLogs() {\n        setLogs(!filter ? undefined : await (provider === null || provider === void 0 ? void 0 : provider.getLogs(filter)));\n    }\n    useEffect(() => {\n        void updateLogs();\n    }, [provider, blockNumber]);\n    return logs;\n}\n//# sourceMappingURL=useRawLogs.js.map"]},"metadata":{},"sourceType":"module"}