{"ast":null,"code":"import { useMemo } from 'react';\nimport { useRawLogs } from './useRawLogs';\nimport { decodeLogs, encodeFilterData } from '../helpers';\n/**\n * Makes a call to get the logs for a specific contract event and returns the decoded logs or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * A syntax sugar for {@link useRawLogs} that uses ABI, event name, and arguments instead of raw data.\n * @param filter an event filter (see {@link TypedFilter})\n * @param queryParams allows for additional configuration of the query (see {@link LogQueryParams})\n * @returns an array of decoded logs (see {@link LogsResult})\n * @public\n */\nexport function useLogs(filter) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    fromBlock,\n    toBlock,\n    blockHash\n  } = queryParams;\n  const rawFilter = useMemo(() => encodeFilterData(filter, fromBlock, toBlock, blockHash), [filter, fromBlock, toBlock, blockHash]);\n  const result = useRawLogs(rawFilter instanceof Error ? undefined : rawFilter, queryParams);\n  return useMemo(() => decodeLogs(filter, rawFilter instanceof Error ? rawFilter : result), [result, filter, rawFilter]);\n}","map":{"version":3,"sources":["../../../../src/hooks/useLogs.ts"],"names":[],"mappings":"AAAA,SAAS,OAAO,QAAQ,OAAO;AAG/B,SAAS,UAAU,QAAQ,cAAc;AACzC,SAAqB,UAAU,EAAE,gBAAgB,QAAQ,YAAY;AAerE;;;;;;;;AAQG;AACH,OAAM,SAAU,OAAO,CACrB,MAAkC,EACF;EAAA,IAAhC,WAAA,uEAA8B,CAAA,CAAE;EAEhC,MAAM;IAAE,SAAS;IAAE,OAAO;IAAE;EAAS,CAAE,GAAG,WAAW;EAErD,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,gBAAgB,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,CAAC,EAAE,CACvF,MAAM,EACN,SAAS,EACT,OAAO,EACP,SAAS,CACV,CAAC;EACF,MAAM,MAAM,GAAG,UAAU,CAAC,SAAS,YAAY,KAAK,GAAG,SAAS,GAAG,SAAS,EAAE,WAAW,CAAC;EAC1F,OAAO,OAAO,CAAC,MAAM,UAAU,CAAC,MAAM,EAAE,SAAS,YAAY,KAAK,GAAG,SAAS,GAAG,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AACxH","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useRawLogs } from './useRawLogs';\nimport { decodeLogs, encodeFilterData } from '../helpers';\n/**\n * Makes a call to get the logs for a specific contract event and returns the decoded logs or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the returned logs change.\n * A syntax sugar for {@link useRawLogs} that uses ABI, event name, and arguments instead of raw data.\n * @param filter an event filter (see {@link TypedFilter})\n * @param queryParams allows for additional configuration of the query (see {@link LogQueryParams})\n * @returns an array of decoded logs (see {@link LogsResult})\n * @public\n */\nexport function useLogs(filter, queryParams = {}) {\n    const { fromBlock, toBlock, blockHash } = queryParams;\n    const rawFilter = useMemo(() => encodeFilterData(filter, fromBlock, toBlock, blockHash), [\n        filter,\n        fromBlock,\n        toBlock,\n        blockHash,\n    ]);\n    const result = useRawLogs(rawFilter instanceof Error ? undefined : rawFilter, queryParams);\n    return useMemo(() => decodeLogs(filter, rawFilter instanceof Error ? rawFilter : result), [result, filter, rawFilter]);\n}\n//# sourceMappingURL=useLogs.js.map"]},"metadata":{},"sourceType":"module"}