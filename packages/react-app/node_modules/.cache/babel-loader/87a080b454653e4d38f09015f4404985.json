{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { BigNumber } from 'ethers';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\nimport { useBlockNumbers } from './useBlockNumbers';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\nexport function useBlockMeta() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a, _b;\n  const chainId = useChainId({\n    queryParams\n  });\n  const {\n    refresh: configRefresh\n  } = useConfig();\n  const blockNumbers = useBlockNumbers();\n  const address = useMulticallAddress(queryParams);\n  const refresh = (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : configRefresh;\n  const isStatic = (_b = queryParams.isStatic) !== null && _b !== void 0 ? _b : refresh === 'never';\n  const refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined;\n  const timestamp = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n    chainId,\n    isStatic,\n    refreshPerBlocks\n  });\n  const difficulty = useRawCall(address && chainId !== undefined && {\n    address,\n    data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n    chainId,\n    isStatic,\n    refreshPerBlocks\n  });\n  return {\n    timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n    blockNumber: chainId ? blockNumbers[chainId] : undefined\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useBlockMeta.ts"],"names":[],"mappings":"AAAA,SAAkB,YAAY,QAAQ,cAAc;AACpD,SAAS,SAAS,QAAQ,QAAQ;AAClC,SAAS,mBAAmB,QAAQ,uBAAuB;AAE3D,SAAS,UAAU,QAAQ,eAAe;AAC1C,SAAS,UAAU,QAAQ,cAAc;AACzC,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,eAAe,QAAQ,mBAAmB;AAEnD,MAAM,gCAAgC,GAAG,YAAY,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,EAAE,CAAC;AACxG,MAAM,iCAAiC,GAAG,YAAY,CAAC,kBAAkB,CAAC,2BAA2B,EAAE,EAAE,CAAC;AAE1G;;;AAGG;AACH,OAAM,SAAU,YAAY,GAA8B;EAAA,IAA7B,WAAA,uEAA2B,CAAA,CAAE;;EACxD,MAAM,OAAO,GAAG,UAAU,CAAC;IAAE;EAAW,CAAE,CAAC;EAC3C,MAAM;IAAE,OAAO,EAAE;EAAa,CAAE,GAAG,SAAS,EAAE;EAC9C,MAAM,YAAY,GAAG,eAAe,EAAE;EAEtC,MAAM,OAAO,GAAG,mBAAmB,CAAC,WAAW,CAAC;EAChD,MAAM,OAAO,GAAG,CAAA,EAAA,GAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,aAAa;EACpD,MAAM,QAAQ,GAAG,CAAA,EAAA,GAAA,WAAW,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,OAAO,KAAK,OAAO;EAC5D,MAAM,gBAAgB,GAAG,OAAO,OAAO,KAAK,QAAQ,GAAG,OAAO,GAAG,SAAS;EAC1E,MAAM,SAAS,GAAG,UAAU,CAC1B,OAAO,IACL,OAAO,KAAK,SAAS,IAAI;IACvB,OAAO;IACP,IAAI,EAAE,gCAAgC;IACtC,OAAO;IACP,QAAQ;IACR;GACD,CACJ;EACD,MAAM,UAAU,GAAG,UAAU,CAC3B,OAAO,IACL,OAAO,KAAK,SAAS,IAAI;IACvB,OAAO;IACP,IAAI,EAAE,iCAAiC;IACvC,OAAO;IACP,QAAQ;IACR;GACD,CACJ;EAED,OAAO;IACL,SAAS,EAAE,SAAS,KAAK,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,GAAG,SAAS;IAC/G,UAAU,EAAE,UAAU,KAAK,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,SAAS;IACnF,WAAW,EAAE,OAAO,GAAG,YAAY,CAAC,OAAkB,CAAC,GAAG;GAC3D;AACH","sourceRoot":"","sourcesContent":["import { MultiCallABI } from '../constants';\nimport { BigNumber } from 'ethers';\nimport { useMulticallAddress } from './useMulticallAddress';\nimport { useRawCall } from './useRawCalls';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\nimport { useBlockNumbers } from './useBlockNumbers';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\n/**\n * Queries block metadata.\n * @public\n */\nexport function useBlockMeta(queryParams = {}) {\n    var _a, _b;\n    const chainId = useChainId({ queryParams });\n    const { refresh: configRefresh } = useConfig();\n    const blockNumbers = useBlockNumbers();\n    const address = useMulticallAddress(queryParams);\n    const refresh = (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : configRefresh;\n    const isStatic = (_b = queryParams.isStatic) !== null && _b !== void 0 ? _b : refresh === 'never';\n    const refreshPerBlocks = typeof refresh === 'number' ? refresh : undefined;\n    const timestamp = useRawCall(address &&\n        chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n    });\n    const difficulty = useRawCall(address &&\n        chainId !== undefined && {\n        address,\n        data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,\n        chainId,\n        isStatic,\n        refreshPerBlocks,\n    });\n    return {\n        timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp.value).mul(1000).toNumber()) : undefined,\n        difficulty: difficulty !== undefined ? BigNumber.from(difficulty.value) : undefined,\n        blockNumber: chainId ? blockNumbers[chainId] : undefined,\n    };\n}\n//# sourceMappingURL=useBlockMeta.js.map"]},"metadata":{},"sourceType":"module"}