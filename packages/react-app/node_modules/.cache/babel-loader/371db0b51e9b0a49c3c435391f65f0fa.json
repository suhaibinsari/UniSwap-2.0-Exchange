{"ast":null,"code":"import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\nexport function useTransactions() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chainId: defaultChainId,\n    account\n  } = useEthers();\n  const {\n    addTransaction,\n    transactions\n  } = useTransactionsContext();\n  const {\n    chainId: _chainId\n  } = queryParams;\n  const chainId = useMemo(() => _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId, [_chainId, defaultChainId]);\n  const filtered = useMemo(() => {\n    var _a;\n    if (chainId === undefined || !account) {\n      return [];\n    }\n    return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter(x => x.transaction.from === account);\n  }, [transactions, chainId, account]);\n  return {\n    transactions: filtered,\n    addTransaction\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useTransactions.ts"],"names":[],"mappings":"AAAA,SAAS,OAAO,QAAQ,OAAO;AAE/B,SAAS,sBAAsB,QAAQ,cAAc;AACrD,SAAS,SAAS,QAAQ,aAAa;AAEvC;;;;;;;;;;;;;;;;;;;;;AAqBG;AACH,OAAM,SAAU,eAAe,GAA8B;EAAA,IAA7B,WAAA,uEAA2B,CAAA,CAAE;EAC3D,MAAM;IAAE,OAAO,EAAE,cAAc;IAAE;EAAO,CAAE,GAAG,SAAS,EAAE;EACxD,MAAM;IAAE,cAAc;IAAE;EAAY,CAAE,GAAG,sBAAsB,EAAE;EACjE,MAAM;IAAE,OAAO,EAAE;EAAQ,CAAE,GAAG,WAAW;EAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAR,QAAQ,GAAI,cAAc,EAAE,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;EAErF,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAK;;IAC5B,IAAI,OAAO,KAAK,SAAS,IAAI,CAAC,OAAO,EAAE;MACrC,OAAO,EAAE;IACV;IACD,OAAO,CAAC,CAAA,EAAA,GAAA,YAAY,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,EAAE,MAAM,CAAE,CAAC,IAAK,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,OAAO,CAAC;EACpF,CAAC,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;EAEpC,OAAO;IACL,YAAY,EAAE,QAAQ;IACtB;GACD;AACH","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useTransactionsContext } from '../providers';\nimport { useEthers } from './useEthers';\n/**\n * `useTransactions` hook returns a list `transactions`. This list contains\n * all transactions that were sent using {@link useContractFunction} and {@link useSendTransaction}.\n * Transactions are stored in local storage and the status is rechecked on every new block.\n *\n * Each transaction has following type:\n *\n * ```\n * export interface StoredTransaction {\n *   transaction: TransactionResponse\n *   submittedAt: number\n *   receipt?: TransactionReceipt\n *   lastCheckedBlockNumber?: number\n *   transactionName?: string\n *   originalTransaction?: TransactionResponse\n * }\n * ```\n *\n * @see [Transaction Response](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionResponse)\n * @see [Transaction Receipt](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt)\n * @public\n */\nexport function useTransactions(queryParams = {}) {\n    const { chainId: defaultChainId, account } = useEthers();\n    const { addTransaction, transactions } = useTransactionsContext();\n    const { chainId: _chainId } = queryParams;\n    const chainId = useMemo(() => _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId, [_chainId, defaultChainId]);\n    const filtered = useMemo(() => {\n        var _a;\n        if (chainId === undefined || !account) {\n            return [];\n        }\n        return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter((x) => x.transaction.from === account);\n    }, [transactions, chainId, account]);\n    return {\n        transactions: filtered,\n        addTransaction,\n    };\n}\n//# sourceMappingURL=useTransactions.js.map"]},"metadata":{},"sourceType":"module"}