{"ast":null,"code":"import { utils } from 'ethers';\nimport { BigNumber } from 'ethers';\nimport { shortenString } from './common';\n/**\n * @public\n */\nexport function shortenAddress(address) {\n  try {\n    const formattedAddress = utils.getAddress(address);\n    return shortenString(formattedAddress);\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}\n/**\n * @public\n */\nexport function shortenIfAddress(address) {\n  if (typeof address === 'string' && address.length > 0) {\n    return shortenAddress(address);\n  }\n  return '';\n}\n/**\n * @public\n */\nexport function compareAddress(firstAddress, secondAddress) {\n  try {\n    const parsedFirstAddress = BigNumber.from(firstAddress);\n    const parsedSecondAddress = BigNumber.from(secondAddress);\n    if (parsedFirstAddress.gt(parsedSecondAddress)) {\n      return 1;\n    }\n    if (parsedFirstAddress.lt(parsedSecondAddress)) {\n      return -1;\n    }\n    return 0;\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}\n/**\n * @public\n */\nexport function addressEqual(firstAddress, secondAddress) {\n  try {\n    return utils.getAddress(firstAddress) === utils.getAddress(secondAddress);\n  } catch (_a) {\n    throw new TypeError(\"Invalid input, address can't be parsed\");\n  }\n}","map":{"version":3,"sources":["../../../../src/helpers/address.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,QAAQ,QAAQ;AAC9B,SAAS,SAAS,QAAQ,QAAQ;AAElC,SAAS,aAAa,QAAQ,UAAU;AAExC;;AAEG;AACH,OAAM,SAAU,cAAc,CAAC,OAAe,EAAA;EAC5C,IAAI;IACF,MAAM,gBAAgB,GAAG,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC;IAClD,OAAO,aAAa,CAAC,gBAAgB,CAAC;GACvC,CAAC,OAAA,EAAA,EAAM;IACN,MAAM,IAAI,SAAS,CAAC,wCAAwC,CAAC;EAC9D;AACH;AAEA;;AAEG;AACH,OAAM,SAAU,gBAAgB,CAAC,OAAuB,EAAA;EACtD,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;IACrD,OAAO,cAAc,CAAC,OAAO,CAAC;EAC/B;EACD,OAAO,EAAE;AACX;AAEA;;AAEG;AACH,OAAM,SAAU,cAAc,CAAC,YAAoB,EAAE,aAAqB,EAAA;EACxE,IAAI;IACF,MAAM,kBAAkB,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC;IACvD,MAAM,mBAAmB,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC;IAEzD,IAAI,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,CAAC,EAAE;MAC9C,OAAO,CAAC;IACT;IAED,IAAI,kBAAkB,CAAC,EAAE,CAAC,mBAAmB,CAAC,EAAE;MAC9C,OAAO,CAAC,CAAC;IACV;IAED,OAAO,CAAC;GACT,CAAC,OAAA,EAAA,EAAM;IACN,MAAM,IAAI,SAAS,CAAC,wCAAwC,CAAC;EAC9D;AACH;AAEA;;AAEG;AACH,OAAM,SAAU,YAAY,CAAC,YAAoB,EAAE,aAAqB,EAAA;EACtE,IAAI;IACF,OAAO,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC;GAC1E,CAAC,OAAA,EAAA,EAAM;IACN,MAAM,IAAI,SAAS,CAAC,wCAAwC,CAAC;EAC9D;AACH","sourceRoot":"","sourcesContent":["import { utils } from 'ethers';\nimport { BigNumber } from 'ethers';\nimport { shortenString } from './common';\n/**\n * @public\n */\nexport function shortenAddress(address) {\n    try {\n        const formattedAddress = utils.getAddress(address);\n        return shortenString(formattedAddress);\n    }\n    catch (_a) {\n        throw new TypeError(\"Invalid input, address can't be parsed\");\n    }\n}\n/**\n * @public\n */\nexport function shortenIfAddress(address) {\n    if (typeof address === 'string' && address.length > 0) {\n        return shortenAddress(address);\n    }\n    return '';\n}\n/**\n * @public\n */\nexport function compareAddress(firstAddress, secondAddress) {\n    try {\n        const parsedFirstAddress = BigNumber.from(firstAddress);\n        const parsedSecondAddress = BigNumber.from(secondAddress);\n        if (parsedFirstAddress.gt(parsedSecondAddress)) {\n            return 1;\n        }\n        if (parsedFirstAddress.lt(parsedSecondAddress)) {\n            return -1;\n        }\n        return 0;\n    }\n    catch (_a) {\n        throw new TypeError(\"Invalid input, address can't be parsed\");\n    }\n}\n/**\n * @public\n */\nexport function addressEqual(firstAddress, secondAddress) {\n    try {\n        return utils.getAddress(firstAddress) === utils.getAddress(secondAddress);\n    }\n    catch (_a) {\n        throw new TypeError(\"Invalid input, address can't be parsed\");\n    }\n}\n//# sourceMappingURL=address.js.map"]},"metadata":{},"sourceType":"module"}