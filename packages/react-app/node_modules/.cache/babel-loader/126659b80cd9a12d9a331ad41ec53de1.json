{"ast":null,"code":"import { Contract } from 'ethers';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nconst ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])'];\n/**\n * @public\n */\nexport const multicall2Factory = fastEncoding => fastEncoding ? fastEncodingMulticall2 : multicall2;\n/**\n * @public\n */\nexport async function multicall2(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n  const contract = new Contract(address, ABI, provider);\n  const results = await contract.tryAggregate(false, requests.map(_ref => {\n    let {\n      address,\n      data\n    } = _ref;\n    return [address, data];\n  }), {\n    blockTag: blockNumber\n  });\n  return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall2(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n  const response = await provider.call({\n    to: address,\n    data: encodeTryAggregate(false, requests.map(_ref2 => {\n      let {\n        address,\n        data\n      } = _ref2;\n      return [address, data];\n    }))\n  }, blockNumber);\n  const [results] = decodeTryAggregate(response);\n  return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n  var _a;\n  const state = {};\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const [success, value] = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      success,\n      value\n    };\n    state[address] = stateForAddress;\n  }\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/multicall2.ts"],"names":[],"mappings":"AAAA,SAAS,QAAQ,QAAmB,QAAQ;AAC5C,SAAS,kBAAkB,EAAE,kBAAkB,QAAQ,yBAAyB;AAIhF,MAAM,GAAG,GAAG,CACV,yJAAyJ,CAC1J;AAED;;AAEG;AACH,OAAO,MAAM,iBAAiB,GAAI,YAAqB,IAAM,YAAY,GAAG,sBAAsB,GAAG,UAAW;AAEhH;;AAEG;AACH,OAAO,eAAe,UAAU,CAC9B,QAA4B,EAC5B,OAAe,EACf,WAAmB,EACnB,QAAmB,EAAA;EAEnB,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,CAAA,CAAE;EACV;EACD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC;EACrD,MAAM,OAAO,GAAwB,MAAM,QAAQ,CAAC,YAAY,CAC9D,KAAK,EACL,QAAQ,CAAC,GAAG,CAAC;IAAA,IAAC;MAAE,OAAO;MAAE;IAAI,CAAE;IAAA,OAAK,CAAC,OAAO,EAAE,IAAI,CAAC;EAAA,EAAC,EACpD;IAAE,QAAQ,EAAE;EAAW,CAAE,CAC1B;EACD,OAAO,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC;AACxC;AAEA;;AAEG;AACH,OAAO,eAAe,sBAAsB,CAC1C,QAA4B,EAC5B,OAAe,EACf,WAAmB,EACnB,QAAmB,EAAA;EAEnB,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,CAAA,CAAE;EACV;EACD,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,CAClC;IACE,EAAE,EAAE,OAAO;IACX,IAAI,EAAE,kBAAkB,CACtB,KAAK,EACL,QAAQ,CAAC,GAAG,CAAC;MAAA,IAAC;QAAE,OAAO;QAAE;MAAI,CAAE;MAAA,OAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IAAA,EAAC;GAEvD,EACD,WAAW,CACZ;EACD,MAAM,CAAC,OAAO,CAAC,GAAG,kBAAkB,CAAC,QAAQ,CAAC;EAC9C,OAAO,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC;AACxC;AAEA,SAAS,YAAY,CAAC,OAA4B,EAAE,QAAmB,EAAA;;EACrE,MAAM,KAAK,GAAe,CAAA,CAAE;EAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACxC,MAAM;MAAE,OAAO;MAAE;IAAI,CAAE,GAAG,QAAQ,CAAC,CAAC,CAAC;IACrC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;IACnC,MAAM,eAAe,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,CAAE;IAC5C,eAAe,CAAC,IAAI,CAAC,GAAG;MAAE,OAAO;MAAE;IAAK,CAAE;IAC1C,KAAK,CAAC,OAAO,CAAC,GAAG,eAAe;EACjC;EACD,OAAO,KAAK;AACd","sourceRoot":"","sourcesContent":["import { Contract } from 'ethers';\nimport { decodeTryAggregate, encodeTryAggregate } from '../../../abi/multicall2';\nconst ABI = [\n    'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])',\n];\n/**\n * @public\n */\nexport const multicall2Factory = (fastEncoding) => (fastEncoding ? fastEncodingMulticall2 : multicall2);\n/**\n * @public\n */\nexport async function multicall2(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const results = await contract.tryAggregate(false, requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall2(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const response = await provider.call({\n        to: address,\n        data: encodeTryAggregate(false, requests.map(({ address, data }) => [address, data])),\n    }, blockNumber);\n    const [results] = decodeTryAggregate(response);\n    return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n    var _a;\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const [success, value] = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = { success, value };\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall2.js.map"]},"metadata":{},"sourceType":"module"}