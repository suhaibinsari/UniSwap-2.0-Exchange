{"ast":null,"code":"import { BigNumber } from 'ethers';\n/**\n * @public\n */\nexport class CurrencyValue {\n  constructor(currency, value) {\n    this.currency = currency;\n    this.value = value;\n  }\n  static fromString(currency, value) {\n    return new CurrencyValue(currency, BigNumber.from(value));\n  }\n  static zero(currency) {\n    return new CurrencyValue(currency, BigNumber.from(0));\n  }\n  toString() {\n    return this.value.toString();\n  }\n  format() {\n    let overrideOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.currency.format(this.value.toString(), overrideOptions);\n  }\n  checkCurrency(other) {\n    if (this.currency !== other.currency) {\n      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`);\n    }\n  }\n  map(fn) {\n    return new CurrencyValue(this.currency, fn(this.value));\n  }\n  add(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.add(other.value));\n  }\n  sub(other) {\n    this.checkCurrency(other);\n    return this.map(x => x.sub(other.value));\n  }\n  mul(value) {\n    return this.map(x => x.mul(value));\n  }\n  div(value) {\n    return this.map(x => x.div(value));\n  }\n  mod(value) {\n    return this.map(x => x.mod(value));\n  }\n  equals(other) {\n    return this.currency === other.currency && this.value.eq(other.value);\n  }\n  lt(other) {\n    this.checkCurrency(other);\n    return this.value.lt(other.value);\n  }\n  lte(other) {\n    this.checkCurrency(other);\n    return this.value.lte(other.value);\n  }\n  gt(other) {\n    this.checkCurrency(other);\n    return this.value.gt(other.value);\n  }\n  gte(other) {\n    this.checkCurrency(other);\n    return this.value.gte(other.value);\n  }\n  isZero() {\n    return this.value.isZero();\n  }\n}","map":{"version":3,"sources":["../../../../src/model/CurrencyValue.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from 'ethers';\n/**\n * @public\n */\nexport class CurrencyValue {\n    constructor(currency, value) {\n        this.currency = currency;\n        this.value = value;\n    }\n    static fromString(currency, value) {\n        return new CurrencyValue(currency, BigNumber.from(value));\n    }\n    static zero(currency) {\n        return new CurrencyValue(currency, BigNumber.from(0));\n    }\n    toString() {\n        return this.value.toString();\n    }\n    format(overrideOptions = {}) {\n        return this.currency.format(this.value.toString(), overrideOptions);\n    }\n    checkCurrency(other) {\n        if (this.currency !== other.currency) {\n            throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`);\n        }\n    }\n    map(fn) {\n        return new CurrencyValue(this.currency, fn(this.value));\n    }\n    add(other) {\n        this.checkCurrency(other);\n        return this.map((x) => x.add(other.value));\n    }\n    sub(other) {\n        this.checkCurrency(other);\n        return this.map((x) => x.sub(other.value));\n    }\n    mul(value) {\n        return this.map((x) => x.mul(value));\n    }\n    div(value) {\n        return this.map((x) => x.div(value));\n    }\n    mod(value) {\n        return this.map((x) => x.mod(value));\n    }\n    equals(other) {\n        return this.currency === other.currency && this.value.eq(other.value);\n    }\n    lt(other) {\n        this.checkCurrency(other);\n        return this.value.lt(other.value);\n    }\n    lte(other) {\n        this.checkCurrency(other);\n        return this.value.lte(other.value);\n    }\n    gt(other) {\n        this.checkCurrency(other);\n        return this.value.gt(other.value);\n    }\n    gte(other) {\n        this.checkCurrency(other);\n        return this.value.gte(other.value);\n    }\n    isZero() {\n        return this.value.isZero();\n    }\n}\n//# sourceMappingURL=CurrencyValue.js.map"]},"metadata":{},"sourceType":"module"}