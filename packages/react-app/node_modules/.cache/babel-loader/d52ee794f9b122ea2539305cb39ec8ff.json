{"ast":null,"code":"import { getAddress } from 'ethers/lib/utils';\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams';\nimport { validateArguments } from '../helpers/validateArgument';\nimport { useNetwork } from '../providers';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\nimport { useEffect, useState } from 'react';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers() {\n  const {\n    network: {\n      provider: networkProvider,\n      chainId,\n      accounts,\n      errors\n    },\n    deactivate,\n    activate,\n    activateBrowserWallet,\n    isLoading\n  } = useNetwork();\n  const {\n    networks,\n    readOnlyUrls\n  } = useConfig();\n  const [error, setError] = useState(undefined);\n  const configuredChainIds = Object.keys(readOnlyUrls || {}).map(chainId => parseInt(chainId, 10));\n  const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map(network => network.chainId);\n  useEffect(() => {\n    const isNotConfiguredChainId = chainId && configuredChainIds && configuredChainIds.indexOf(chainId) < 0;\n    const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n    if (isUnsupportedChainId || isNotConfiguredChainId) {\n      const chainIdError = new Error(`${isUnsupportedChainId ? 'Unsupported' : 'Not configured'} chain id: ${chainId}.`);\n      chainIdError.name = 'ChainIdError';\n      setError(chainIdError);\n      return;\n    }\n    setError(errors[errors.length - 1]);\n  }, [chainId, errors]);\n  const readonlyNetwork = useReadonlyNetwork();\n  const provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;\n  const switchNetwork = async chainId => {\n    validateArguments({\n      chainId\n    }, {\n      chainId: 'number'\n    });\n    if (!provider) {\n      throw new Error('Provider not connected.');\n    }\n    try {\n      await provider.send('wallet_switchEthereumChain', [{\n        chainId: `0x${chainId.toString(16)}`\n      }]);\n    } catch (error) {\n      const errChainNotAddedYet = 4902; // Metamask error code\n      if (error.code === errChainNotAddedYet) {\n        const chain = networks === null || networks === void 0 ? void 0 : networks.find(chain => chain.chainId === chainId);\n        if (chain === null || chain === void 0 ? void 0 : chain.rpcUrl) {\n          await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n        }\n      } else {\n        throw error;\n      }\n    }\n  };\n  const account = accounts[0] ? getAddress(accounts[0]) : undefined;\n  return {\n    connector: undefined,\n    library: provider,\n    chainId: (error === null || error === void 0 ? void 0 : error.name) === 'ChainIdError' ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n    account,\n    active: !!provider,\n    activate: async providerOrConnector => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n        await providerOrConnector.activate();\n        return activate(await providerOrConnector.getProvider());\n      }\n      return activate(providerOrConnector);\n    },\n    activateBrowserWallet,\n    deactivate,\n    setError: () => {\n      throw new Error('setError is deprecated');\n    },\n    error,\n    isLoading,\n    switchNetwork\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useEthers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getAddress } from 'ethers/lib/utils';\nimport { getAddNetworkParams } from '../helpers/getAddNetworkParams';\nimport { validateArguments } from '../helpers/validateArgument';\nimport { useNetwork } from '../providers';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\nimport { useEffect, useState } from 'react';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/EthWorks/useDapp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers() {\n    const { network: { provider: networkProvider, chainId, accounts, errors }, deactivate, activate, activateBrowserWallet, isLoading, } = useNetwork();\n    const { networks, readOnlyUrls } = useConfig();\n    const [error, setError] = useState(undefined);\n    const configuredChainIds = Object.keys(readOnlyUrls || {}).map((chainId) => parseInt(chainId, 10));\n    const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map((network) => network.chainId);\n    useEffect(() => {\n        const isNotConfiguredChainId = chainId && configuredChainIds && configuredChainIds.indexOf(chainId) < 0;\n        const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n        if (isUnsupportedChainId || isNotConfiguredChainId) {\n            const chainIdError = new Error(`${isUnsupportedChainId ? 'Unsupported' : 'Not configured'} chain id: ${chainId}.`);\n            chainIdError.name = 'ChainIdError';\n            setError(chainIdError);\n            return;\n        }\n        setError(errors[errors.length - 1]);\n    }, [chainId, errors]);\n    const readonlyNetwork = useReadonlyNetwork();\n    const provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;\n    const switchNetwork = async (chainId) => {\n        validateArguments({ chainId }, { chainId: 'number' });\n        if (!provider) {\n            throw new Error('Provider not connected.');\n        }\n        try {\n            await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }]);\n        }\n        catch (error) {\n            const errChainNotAddedYet = 4902; // Metamask error code\n            if (error.code === errChainNotAddedYet) {\n                const chain = networks === null || networks === void 0 ? void 0 : networks.find((chain) => chain.chainId === chainId);\n                if (chain === null || chain === void 0 ? void 0 : chain.rpcUrl) {\n                    await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n                }\n            }\n            else {\n                throw error;\n            }\n        }\n    };\n    const account = accounts[0] ? getAddress(accounts[0]) : undefined;\n    return {\n        connector: undefined,\n        library: provider,\n        chainId: (error === null || error === void 0 ? void 0 : error.name) === 'ChainIdError' ? undefined : networkProvider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n        account,\n        active: !!provider,\n        activate: async (providerOrConnector) => {\n            if ('getProvider' in providerOrConnector) {\n                console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n                await providerOrConnector.activate();\n                return activate(await providerOrConnector.getProvider());\n            }\n            return activate(providerOrConnector);\n        },\n        activateBrowserWallet,\n        deactivate,\n        setError: () => {\n            throw new Error('setError is deprecated');\n        },\n        error,\n        isLoading,\n        switchNetwork,\n    };\n}\n//# sourceMappingURL=useEthers.js.map"]},"metadata":{},"sourceType":"module"}