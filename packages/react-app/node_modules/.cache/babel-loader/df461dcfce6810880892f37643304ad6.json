{"ast":null,"code":"import { notifyDevtools } from '../../devtools';\nexport function performMulticall(provider, multicallExecutor, multicallAddress, blockNumber, uniqueCalls, dispatchState, chainId, reportError) {\n  if (uniqueCalls.length === 0) {\n    return;\n  }\n  const start = Date.now();\n  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls).then(state => {\n    dispatchState({\n      type: 'FETCH_SUCCESS',\n      blockNumber,\n      chainId,\n      state\n    });\n    notifyDevtools({\n      type: 'MULTICALL_SUCCESS',\n      duration: Date.now() - start,\n      chainId,\n      blockNumber,\n      multicallAddress,\n      state\n    });\n  }).catch(error => {\n    reportError(error);\n    dispatchState({\n      type: 'FETCH_ERROR',\n      blockNumber,\n      chainId,\n      error\n    });\n    notifyDevtools({\n      type: 'MULTICALL_ERROR',\n      duration: Date.now() - start,\n      chainId,\n      blockNumber,\n      multicallAddress,\n      calls: uniqueCalls,\n      error\n    });\n  });\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/performMulticall.ts"],"names":[],"mappings":"AAKA,SAAS,cAAc,QAAQ,gBAAgB;AAE/C,OAAM,SAAU,gBAAgB,CAC9B,QAAgC,EAChC,iBAKiB,EACjB,gBAAwB,EACxB,WAAmB,EACnB,WAAsB,EACtB,aAAyC,EACzC,OAAgB,EAChB,WAAmC,EAAA;EAEnC,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;IAC5B;EACD;EAED,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE;EACxB,iBAAiB,CAAC,QAAQ,EAAE,gBAAgB,EAAE,WAAW,EAAE,WAAW,CAAC,CACpE,IAAI,CAAE,KAAK,IAAI;IACd,aAAa,CAAC;MAAE,IAAI,EAAE,eAAe;MAAE,WAAW;MAAE,OAAO;MAAE;IAAK,CAAE,CAAC;IACrE,cAAc,CAAC;MACb,IAAI,EAAE,mBAAmB;MACzB,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK;MAC5B,OAAO;MACP,WAAW;MACX,gBAAgB;MAChB;KACD,CAAC;EACJ,CAAC,CAAC,CACD,KAAK,CAAE,KAAK,IAAI;IACf,WAAW,CAAC,KAAK,CAAC;IAClB,aAAa,CAAC;MAAE,IAAI,EAAE,aAAa;MAAE,WAAW;MAAE,OAAO;MAAE;IAAK,CAAE,CAAC;IACnE,cAAc,CAAC;MACb,IAAI,EAAE,iBAAiB;MACvB,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK;MAC5B,OAAO;MACP,WAAW;MACX,gBAAgB;MAChB,KAAK,EAAE,WAAW;MAClB;KACD,CAAC;EACJ,CAAC,CAAC;AACN","sourceRoot":"","sourcesContent":["import { notifyDevtools } from '../../devtools';\nexport function performMulticall(provider, multicallExecutor, multicallAddress, blockNumber, uniqueCalls, dispatchState, chainId, reportError) {\n    if (uniqueCalls.length === 0) {\n        return;\n    }\n    const start = Date.now();\n    multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls)\n        .then((state) => {\n        dispatchState({ type: 'FETCH_SUCCESS', blockNumber, chainId, state });\n        notifyDevtools({\n            type: 'MULTICALL_SUCCESS',\n            duration: Date.now() - start,\n            chainId,\n            blockNumber,\n            multicallAddress,\n            state,\n        });\n    })\n        .catch((error) => {\n        reportError(error);\n        dispatchState({ type: 'FETCH_ERROR', blockNumber, chainId, error });\n        notifyDevtools({\n            type: 'MULTICALL_ERROR',\n            duration: Date.now() - start,\n            chainId,\n            blockNumber,\n            multicallAddress,\n            calls: uniqueCalls,\n            error,\n        });\n    });\n}\n//# sourceMappingURL=performMulticall.js.map"]},"metadata":{},"sourceType":"module"}