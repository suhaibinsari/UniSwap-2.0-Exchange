{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumber, useBlockNumbers } from '../hooks';\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice() {\n  let queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    library\n  } = useEthers();\n  const providers = useReadonlyNetworks();\n  const _blockNumber = useBlockNumber();\n  const blockNumbers = useBlockNumbers();\n  const [gasPrice, setGasPrice] = useState();\n  const {\n    chainId\n  } = queryParams;\n  const [provider, blockNumber] = useMemo(() => chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber], [providers, library, blockNumbers, _blockNumber]);\n  async function updateGasPrice() {\n    setGasPrice(await (provider === null || provider === void 0 ? void 0 : provider.getGasPrice()));\n  }\n  useEffect(() => {\n    void updateGasPrice();\n  }, [provider, blockNumber]);\n  return gasPrice;\n}","map":{"version":3,"sources":["../../../../src/hooks/useGasPrice.ts"],"names":[],"mappings":"AACA,SAAS,SAAS,EAAE,OAAO,EAAE,QAAQ,QAAQ,OAAO;AACpD,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,mBAAmB,QAAQ,uCAAuC;AAC3E,SAAS,cAAc,EAAE,eAAe,QAAQ,UAAU;AAG1D;;;;AAIG;AACH,OAAM,SAAU,WAAW,GAA8B;EAAA,IAA7B,WAAA,uEAA2B,CAAA,CAAE;EACvD,MAAM;IAAE;EAAO,CAAE,GAAG,SAAS,EAAE;EAC/B,MAAM,SAAS,GAAG,mBAAmB,EAAE;EACvC,MAAM,YAAY,GAAG,cAAc,EAAE;EACrC,MAAM,YAAY,GAAG,eAAe,EAAE;EAEtC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,EAAyB;EAEjE,MAAM;IAAE;EAAO,CAAE,GAAG,WAAW;EAE/B,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,OAAO,CACrC,MAAO,OAAO,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAE,EACvF,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,CAAC,CACjD;EAED,eAAe,cAAc,GAAA;IAC3B,WAAW,CAAC,OAAM,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,WAAW,EAAE,CAAA,CAAC;EAC5C;EAEA,SAAS,CAAC,MAAK;IACb,KAAK,cAAc,EAAE;EACvB,CAAC,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;EAE3B,OAAO,QAAQ;AACjB","sourceRoot":"","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumber, useBlockNumbers } from '../hooks';\n/**\n * Returns gas price of current network.\n * @public\n * @returns gas price of current network. `undefined` if not initialised.\n */\nexport function useGasPrice(queryParams = {}) {\n    const { library } = useEthers();\n    const providers = useReadonlyNetworks();\n    const _blockNumber = useBlockNumber();\n    const blockNumbers = useBlockNumbers();\n    const [gasPrice, setGasPrice] = useState();\n    const { chainId } = queryParams;\n    const [provider, blockNumber] = useMemo(() => (chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber]), [providers, library, blockNumbers, _blockNumber]);\n    async function updateGasPrice() {\n        setGasPrice(await (provider === null || provider === void 0 ? void 0 : provider.getGasPrice()));\n    }\n    useEffect(() => {\n        void updateGasPrice();\n    }, [provider, blockNumber]);\n    return gasPrice;\n}\n//# sourceMappingURL=useGasPrice.js.map"]},"metadata":{},"sourceType":"module"}