{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidFilter(filter) {\n  if (!filter) {\n    return;\n  }\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n  console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`);\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function encodeFilterData(filter, fromBlock, toBlock, blockHash) {\n  if (!filter) {\n    return undefined;\n  }\n  const {\n    contract,\n    event,\n    args\n  } = filter;\n  if (!contract.address || !event) {\n    warnOnInvalidFilter(filter);\n    return undefined;\n  }\n  try {\n    const encodedTopics = contract.interface.encodeFilterTopics(event, args);\n    if (blockHash) {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        blockHash: blockHash\n      };\n    } else {\n      return {\n        address: contract.address,\n        topics: encodedTopics,\n        fromBlock: fromBlock !== null && fromBlock !== void 0 ? fromBlock : 0,\n        toBlock: toBlock !== null && toBlock !== void 0 ? toBlock : 'latest'\n      };\n    }\n  } catch (e) {\n    if (e instanceof Error) {\n      return e;\n    } else {\n      warnOnInvalidFilter(filter);\n      return undefined;\n    }\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeLogs(filter, result) {\n  if (!result || !filter) {\n    return undefined;\n  }\n  try {\n    if (result instanceof Error) {\n      return {\n        value: undefined,\n        error: result\n      };\n    }\n    const decodedLogs = [];\n    for (const log of result) {\n      const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics);\n      decodedLogs.push({\n        data,\n        blockNumber: log.blockNumber,\n        blockHash: log.blockHash,\n        transactionIndex: log.transactionIndex,\n        transactionHash: log.transactionHash,\n        removed: log.removed\n      });\n    }\n    return {\n      value: decodedLogs,\n      error: undefined\n    };\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error\n    };\n  }\n}","map":{"version":3,"sources":["../../../../src/helpers/logs.ts"],"names":[],"mappings":"AAKA;;AAEG;AACH,OAAM,SAAU,mBAAmB,CAAC,MAA2B,EAAA;EAC7D,IAAI,CAAC,MAAM,EAAE;IACX;EACD;EACD,MAAM;IAAE,QAAQ;IAAE,KAAK;IAAE;EAAI,CAAE,GAAG,MAAM;EACxC,OAAO,CAAC,IAAI,CAAC,oCAAoC,QAAQ,CAAC,OAAO,UAAU,KAAK,SAAS,IAAI,EAAE,CAAC;AAClG;AAEA;;AAEG;AACH,OAAM,SAAU,gBAAgB,CAC9B,MAA2B,EAC3B,SAAoB,EACpB,OAAkB,EAClB,SAAkB,EAAA;EAElB,IAAI,CAAC,MAAM,EAAE;IACX,OAAO,SAAS;EACjB;EACD,MAAM;IAAE,QAAQ;IAAE,KAAK;IAAE;EAAI,CAAE,GAAG,MAAM;EACxC,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,KAAK,EAAE;IAC/B,mBAAmB,CAAC,MAAM,CAAC;IAC3B,OAAO,SAAS;EACjB;EACD,IAAI;IACF,MAAM,aAAa,GAAG,QAAQ,CAAC,SAAS,CAAC,kBAAkB,CAAE,KAAwC,EAAE,IAAI,CAAC;IAE5G,IAAI,SAAS,EAAE;MACb,OAAO;QACL,OAAO,EAAE,QAAQ,CAAC,OAAO;QACzB,MAAM,EAAE,aAAa;QACrB,SAAS,EAAE;OACS;KACvB,MAAM;MACL,OAAO;QACL,OAAO,EAAE,QAAQ,CAAC,OAAO;QACzB,MAAM,EAAE,aAAa;QACrB,SAAS,EAAE,SAAS,KAAA,IAAA,IAAT,SAAS,KAAA,KAAA,CAAA,GAAT,SAAS,GAAI,CAAC;QACzB,OAAO,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAP,OAAO,GAAI;OACX;IACZ;GACF,CAAC,OAAO,CAAC,EAAE;IACV,IAAI,CAAC,YAAY,KAAK,EAAE;MACtB,OAAO,CAAU;KAClB,MAAM;MACL,mBAAmB,CAAC,MAAM,CAAC;MAC3B,OAAO,SAAS;IACjB;EACF;AACH;AAUA;;AAEG;AACH,OAAM,SAAU,UAAU,CACxB,MAA2B,EAC3B,MAA6B,EAAA;EAE7B,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;IACtB,OAAO,SAAS;EACjB;EACD,IAAI;IACF,IAAI,MAAM,YAAY,KAAK,EAAE;MAC3B,OAAO;QACL,KAAK,EAAE,SAAS;QAChB,KAAK,EAAE;OACR;IACF;IAED,MAAM,WAAW,GAA0C,EAAE;IAE7D,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;MACxB,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAuB;MAE/G,WAAW,CAAC,IAAI,CAAC;QACf,IAAI;QACJ,WAAW,EAAE,GAAG,CAAC,WAAW;QAC5B,SAAS,EAAE,GAAG,CAAC,SAAS;QACxB,gBAAgB,EAAE,GAAG,CAAC,gBAAgB;QACtC,eAAe,EAAE,GAAG,CAAC,eAAe;QACpC,OAAO,EAAE,GAAG,CAAC;OACd,CAAC;IACH;IAED,OAAO;MACL,KAAK,EAAE,WAAW;MAClB,KAAK,EAAE;KACR;GACF,CAAC,OAAO,KAAK,EAAE;IACd,OAAO;MACL,KAAK,EAAE,SAAS;MAChB,KAAK,EAAE;KACR;EACF;AACH","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function warnOnInvalidFilter(filter) {\n    if (!filter) {\n        return;\n    }\n    const { contract, event, args } = filter;\n    console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`);\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function encodeFilterData(filter, fromBlock, toBlock, blockHash) {\n    if (!filter) {\n        return undefined;\n    }\n    const { contract, event, args } = filter;\n    if (!contract.address || !event) {\n        warnOnInvalidFilter(filter);\n        return undefined;\n    }\n    try {\n        const encodedTopics = contract.interface.encodeFilterTopics(event, args);\n        if (blockHash) {\n            return {\n                address: contract.address,\n                topics: encodedTopics,\n                blockHash: blockHash,\n            };\n        }\n        else {\n            return {\n                address: contract.address,\n                topics: encodedTopics,\n                fromBlock: fromBlock !== null && fromBlock !== void 0 ? fromBlock : 0,\n                toBlock: toBlock !== null && toBlock !== void 0 ? toBlock : 'latest',\n            };\n        }\n    }\n    catch (e) {\n        if (e instanceof Error) {\n            return e;\n        }\n        else {\n            warnOnInvalidFilter(filter);\n            return undefined;\n        }\n    }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function decodeLogs(filter, result) {\n    if (!result || !filter) {\n        return undefined;\n    }\n    try {\n        if (result instanceof Error) {\n            return {\n                value: undefined,\n                error: result,\n            };\n        }\n        const decodedLogs = [];\n        for (const log of result) {\n            const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics);\n            decodedLogs.push({\n                data,\n                blockNumber: log.blockNumber,\n                blockHash: log.blockHash,\n                transactionIndex: log.transactionIndex,\n                transactionHash: log.transactionHash,\n                removed: log.removed,\n            });\n        }\n        return {\n            value: decodedLogs,\n            error: undefined,\n        };\n    }\n    catch (error) {\n        return {\n            value: undefined,\n            error: error,\n        };\n    }\n}\n//# sourceMappingURL=logs.js.map"]},"metadata":{},"sourceType":"module"}