{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { utils } from 'ethers';\nimport { getChainById } from '../helpers';\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig, useLocalStorage } from '../hooks';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport multicall2ABI from '../constants/abi/MultiCall2.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n(function (LocalMulticallState) {\n  LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n  LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n  LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n  LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n  LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\nexport function LocalMulticallProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const updateConfig = useUpdateConfig();\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const [, setMulticallAddress, getCurrent] = useLocalStorage('local_multicall_address' + chainId);\n  const {\n    multicallAddresses,\n    multicallVersion\n  } = useConfig();\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown);\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState();\n  const blockNumber = useBlockNumber();\n  useEffect(() => {\n    var _a;\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown);\n    } else if (!((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain)) {\n      setLocalMulticallState(LocalMulticallState.NonLocal);\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed);\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const checkDeployed = async () => {\n        const multicallAddress = getCurrent();\n        if (typeof multicallAddress === 'string' && utils.isAddress(multicallAddress)) {\n          const multicallCode = await library.getCode(multicallAddress);\n          if (multicallCode !== '0x') {\n            updateConfig({\n              multicallAddresses: {\n                [chainId]: multicallAddress\n              }\n            });\n            return;\n          }\n        }\n        const signer = library.getSigner();\n        if (!signer) {\n          setLocalMulticallState(LocalMulticallState.Error);\n          return;\n        }\n        setLocalMulticallState(LocalMulticallState.Deploying);\n        const deployMulticall = async () => {\n          try {\n            const {\n              contractAddress,\n              blockNumber\n            } = await deployContract(multicallVersion === 1 ? multicallABI : multicall2ABI, signer);\n            updateConfig({\n              multicallAddresses: {\n                [chainId]: contractAddress\n              }\n            });\n            setMulticallAddress(contractAddress);\n            setMulticallBlockNumber(blockNumber);\n            setLocalMulticallState(LocalMulticallState.Deployed);\n          } catch (_a) {\n            setLocalMulticallState(LocalMulticallState.Error);\n          }\n        };\n        void deployMulticall();\n      };\n      void checkDeployed();\n    }\n  }, [library, chainId]);\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {\n    return _jsx(\"div\", {\n      children: \"Deploying multicall...\"\n    });\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return _jsx(\"div\", {\n      children: \"Error deploying multicall contract\"\n    });\n  } else {\n    return _jsx(_Fragment, {\n      children: children\n    });\n  }\n}","map":{"version":3,"sources":["../../../../src/providers/LocalMulticallProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { utils } from 'ethers';\nimport { getChainById } from '../helpers';\nimport { useEthers, useBlockNumber, useConfig, useUpdateConfig, useLocalStorage } from '../hooks';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport multicall2ABI from '../constants/abi/MultiCall2.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n(function (LocalMulticallState) {\n    LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n    LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n    LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n    LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n    LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\nexport function LocalMulticallProvider({ children }) {\n    const updateConfig = useUpdateConfig();\n    const { library, chainId } = useEthers();\n    const [, setMulticallAddress, getCurrent] = useLocalStorage('local_multicall_address' + chainId);\n    const { multicallAddresses, multicallVersion } = useConfig();\n    const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown);\n    const [multicallBlockNumber, setMulticallBlockNumber] = useState();\n    const blockNumber = useBlockNumber();\n    useEffect(() => {\n        var _a;\n        if (!library || !chainId) {\n            setLocalMulticallState(LocalMulticallState.Unknown);\n        }\n        else if (!((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain)) {\n            setLocalMulticallState(LocalMulticallState.NonLocal);\n        }\n        else if (multicallAddresses && multicallAddresses[chainId]) {\n            setLocalMulticallState(LocalMulticallState.Deployed);\n        }\n        else if (localMulticallState !== LocalMulticallState.Deploying) {\n            const checkDeployed = async () => {\n                const multicallAddress = getCurrent();\n                if (typeof multicallAddress === 'string' && utils.isAddress(multicallAddress)) {\n                    const multicallCode = await library.getCode(multicallAddress);\n                    if (multicallCode !== '0x') {\n                        updateConfig({ multicallAddresses: { [chainId]: multicallAddress } });\n                        return;\n                    }\n                }\n                const signer = library.getSigner();\n                if (!signer) {\n                    setLocalMulticallState(LocalMulticallState.Error);\n                    return;\n                }\n                setLocalMulticallState(LocalMulticallState.Deploying);\n                const deployMulticall = async () => {\n                    try {\n                        const { contractAddress, blockNumber } = await deployContract(multicallVersion === 1 ? multicallABI : multicall2ABI, signer);\n                        updateConfig({ multicallAddresses: { [chainId]: contractAddress } });\n                        setMulticallAddress(contractAddress);\n                        setMulticallBlockNumber(blockNumber);\n                        setLocalMulticallState(LocalMulticallState.Deployed);\n                    }\n                    catch (_a) {\n                        setLocalMulticallState(LocalMulticallState.Error);\n                    }\n                };\n                void deployMulticall();\n            };\n            void checkDeployed();\n        }\n    }, [library, chainId]);\n    const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n    if (localMulticallState === LocalMulticallState.Deploying ||\n        (localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock)) {\n        return _jsx(\"div\", { children: \"Deploying multicall...\" });\n    }\n    else if (localMulticallState === LocalMulticallState.Error) {\n        return _jsx(\"div\", { children: \"Error deploying multicall contract\" });\n    }\n    else {\n        return _jsx(_Fragment, { children: children });\n    }\n}\n//# sourceMappingURL=LocalMulticallProvider.js.map"]},"metadata":{},"sourceType":"module"}