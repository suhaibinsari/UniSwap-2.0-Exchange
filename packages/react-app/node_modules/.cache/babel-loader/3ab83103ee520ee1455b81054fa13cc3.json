{"ast":null,"code":"import { useEffect, useState } from 'react';\nfunction getItem(key) {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n  const item = window.localStorage.getItem(key);\n  if (item !== null) {\n    try {\n      return JSON.parse(item);\n    } catch (_a) {\n      // ignore error\n    }\n  }\n}\nfunction setItem(key, value) {\n  if (value === undefined) {\n    window.localStorage.removeItem(key);\n  } else {\n    const toStore = JSON.stringify(value);\n    window.localStorage.setItem(key, toStore);\n    return JSON.parse(toStore);\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useLocalStorage(key) {\n  const [value, setValue] = useState(() => getItem(key));\n  useEffect(() => {\n    setValue(getItem(key));\n  }, [key]);\n  useEffect(() => {\n    setItem(key, value);\n  }, [value]);\n  // As value updating relies on useEffect, it takes mutliple rerenders to fully update the value.\n  // The third elemnt in the return array allows to get the immediate value stored in the localStorage.\n  return [value, setValue, () => getItem(key)];\n}","map":{"version":3,"sources":["../../../../src/hooks/useLocalStorage.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAE3C,SAAS,OAAO,CAAC,GAAW,EAAA;EAC1B,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IACjC,OAAO,IAAI;EACZ;EAED,MAAM,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC;EAC7C,IAAI,IAAI,KAAK,IAAI,EAAE;IACjB,IAAI;MACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;KACxB,CAAC,OAAA,EAAA,EAAM;MACN;IACD;EACF;AACH;AAEA,SAAS,OAAO,CAAC,GAAW,EAAE,KAAU,EAAA;EACtC,IAAI,KAAK,KAAK,SAAS,EAAE;IACvB,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC;GACpC,MAAM;IACL,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IACrC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;IACzC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;EAC3B;AACH;AAEA;;AAEG;AACH,OAAM,SAAU,eAAe,CAAC,GAAW,EAAA;EACzC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;EAEtD,SAAS,CAAC,MAAK;IACb,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;EACxB,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EAET,SAAS,CAAC,MAAK;IACb,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;EACrB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;EAEX;EACA;EACA,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC,GAAG,CAAC,CAAU;AACvD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nfunction getItem(key) {\n    if (typeof window === 'undefined') {\n        return null;\n    }\n    const item = window.localStorage.getItem(key);\n    if (item !== null) {\n        try {\n            return JSON.parse(item);\n        }\n        catch (_a) {\n            // ignore error\n        }\n    }\n}\nfunction setItem(key, value) {\n    if (value === undefined) {\n        window.localStorage.removeItem(key);\n    }\n    else {\n        const toStore = JSON.stringify(value);\n        window.localStorage.setItem(key, toStore);\n        return JSON.parse(toStore);\n    }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function useLocalStorage(key) {\n    const [value, setValue] = useState(() => getItem(key));\n    useEffect(() => {\n        setValue(getItem(key));\n    }, [key]);\n    useEffect(() => {\n        setItem(key, value);\n    }, [value]);\n    // As value updating relies on useEffect, it takes mutliple rerenders to fully update the value.\n    // The third elemnt in the return array allows to get the immediate value stored in the localStorage.\n    return [value, setValue, () => getItem(key)];\n}\n//# sourceMappingURL=useLocalStorage.js.map"]},"metadata":{},"sourceType":"module"}