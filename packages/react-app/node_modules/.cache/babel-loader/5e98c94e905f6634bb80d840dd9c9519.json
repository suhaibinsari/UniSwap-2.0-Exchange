{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n  const {\n    chainId: providerChainId\n  } = useEthers();\n  const [tokenList, setTokenList] = useState();\n  const chainId = overrideChainId || providerChainId;\n  useEffect(() => {\n    fetch(tokenListURI).then(async response => {\n      if (response.ok) {\n        const {\n          name,\n          logoURI,\n          tokens\n        } = await response.json();\n        setTokenList({\n          name,\n          logoURI,\n          tokens: tokens.filter(token => {\n            const sameChainId = token.chainId === chainId;\n            if (!tags) {\n              return sameChainId;\n            }\n            return sameChainId && token.tags && token.tags.some(tag => tags.includes(tag));\n          })\n        });\n      } else {\n        const errorMessage = await response.text();\n        return Promise.reject(new Error(errorMessage));\n      }\n    }).catch(err => {\n      console.log(err);\n      setTokenList(undefined);\n    });\n  }, [tokenListURI, chainId]);\n  return tokenList;\n}","map":{"version":3,"sources":["../../../../src/hooks/useTokenList.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAE3C,SAAS,SAAS,QAAQ,aAAa;AAWvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCG;AACH,OAAM,SAAU,YAAY,CAAC,YAAoB,EAAE,eAAwB,EAAE,IAAe,EAAA;EAC1F,MAAM;IAAE,OAAO,EAAE;EAAe,CAAE,GAAG,SAAS,EAAE;EAChD,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,EAAa;EAEvD,MAAM,OAAO,GAAG,eAAe,IAAI,eAAe;EAElD,SAAS,CAAC,MAAK;IACb,KAAK,CAAC,YAAY,CAAC,CAChB,IAAI,CAAC,MAAO,QAAQ,IAAI;MACvB,IAAI,QAAQ,CAAC,EAAE,EAAE;QACf,MAAM;UAAE,IAAI;UAAE,OAAO;UAAE;QAAM,CAAE,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE;QACvD,YAAY,CAAC;UACX,IAAI;UACJ,OAAO;UACP,MAAM,EAAG,MAAsB,CAAC,MAAM,CAAE,KAAK,IAAI;YAC/C,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,KAAK,OAAO;YAC7C,IAAI,CAAC,IAAI,EAAE;cACT,OAAO,WAAW;YACnB;YACD,OAAO,WAAW,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAE,GAAG,IAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;UAClF,CAAC;SACF,CAAC;OACH,MAAM;QACL,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE;QAC1C,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;MAC/C;IACH,CAAC,CAAC,CACD,KAAK,CAAE,GAAG,IAAI;MACb,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;MAChB,YAAY,CAAC,SAAS,CAAC;IACzB,CAAC,CAAC;EACN,CAAC,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;EAE3B,OAAO,SAAS;AAClB","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useEthers } from './useEthers';\n/**\n * Fetches ERC20 token list under a given address and filters them by chain id. Optionally it can filter also by token tags.\n * @public\n * @param tokenListURI URI to fetch token list from\n * @param overrideChainId chain id to filter tokens by (if not specified then current network is used)\n * @param tags list of tags to filter tokens by (token is included if it contains any of given tags)\n * @returns\n *   `name`: `string` - token list name.\n *   `logoURI`: `string` - URI to get token list logo from.\n *   `tokens`: `TokenInfo[]` - list of `TokenInfo` objects.\n *   If an error occurs `undefined` is returned.\n *\n * @example\n * const { name, logoURI, tokens } = useTokenList(UNISWAP_DEFAULT_TOKEN_LIST_URI) || {}\n * const httpSource = logoURI && logoURI.startsWith('ipfs') ? logoURI.replace('ipfs://', 'https://ipfs.io/ipfs/') : logoURI\n * return (\n *   <div>\n *     <div>\n *       {name}\n *       {httpSource && <img src={httpSource} alt={name}/>}\n *     </div>\n *     <ol>\n *       {tokens?.map(token => (\n *         <li>\n *           <ul>\n *             <li>Name: {token.name}</li>\n *             <li>Symbol: {token.symbol}</li>\n *             <li>Decimals: {token.decimals}</li>\n *             <li>Address: {token.address}</li>\n *           </ul>\n *         </li>\n *       ))}\n *     </ol>\n *   </div>\n * )\n * @see [Token lists](https://uniswap.org/blog/token-lists)\n * @see [Token list json example](https://github.com/Uniswap/token-lists/blob/main/test/schema/example.tokenlist.json)\n * @see [`TokenInfo` object](https://github.com/Uniswap/token-lists/blob/main/src/types.ts)\n */\nexport function useTokenList(tokenListURI, overrideChainId, tags) {\n    const { chainId: providerChainId } = useEthers();\n    const [tokenList, setTokenList] = useState();\n    const chainId = overrideChainId || providerChainId;\n    useEffect(() => {\n        fetch(tokenListURI)\n            .then(async (response) => {\n            if (response.ok) {\n                const { name, logoURI, tokens } = await response.json();\n                setTokenList({\n                    name,\n                    logoURI,\n                    tokens: tokens.filter((token) => {\n                        const sameChainId = token.chainId === chainId;\n                        if (!tags) {\n                            return sameChainId;\n                        }\n                        return sameChainId && token.tags && token.tags.some((tag) => tags.includes(tag));\n                    }),\n                });\n            }\n            else {\n                const errorMessage = await response.text();\n                return Promise.reject(new Error(errorMessage));\n            }\n        })\n            .catch((err) => {\n            console.log(err);\n            setTokenList(undefined);\n        });\n    }, [tokenListURI, chainId]);\n    return tokenList;\n}\n//# sourceMappingURL=useTokenList.js.map"]},"metadata":{},"sourceType":"module"}