{"ast":null,"code":"import { Contract } from 'ethers';\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall';\nconst ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\n/**\n * @public\n */\nexport const multicall1Factory = fastEncoding => fastEncoding ? fastEncodingMulticall : multicall;\n/**\n * @public\n */\nexport async function multicall(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n  const contract = new Contract(address, ABI, provider);\n  const [, results] = await contract.aggregate(requests.map(_ref => {\n    let {\n      address,\n      data\n    } = _ref;\n    return [address, data];\n  }), {\n    blockTag: blockNumber\n  });\n  return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall(provider, address, blockNumber, requests) {\n  if (requests.length === 0) {\n    return {};\n  }\n  const response = await provider.call({\n    to: address,\n    data: encodeAggregate(requests.map(_ref2 => {\n      let {\n        address,\n        data\n      } = _ref2;\n      return [address, data];\n    }))\n  }, blockNumber);\n  const [, results] = decodeAggregate(response);\n  return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n  var _a;\n  const state = {};\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const result = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = {\n      value: result,\n      success: true\n    };\n    state[address] = stateForAddress;\n  }\n  return state;\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/multicall.ts"],"names":[],"mappings":"AACA,SAAS,QAAQ,QAAQ,QAAQ;AAEjC,SAAS,eAAe,EAAE,eAAe,QAAQ,wBAAwB;AAIzE,MAAM,GAAG,GAAG,CACV,0HAA0H,CAC3H;AAED;;AAEG;AACH,OAAO,MAAM,iBAAiB,GAAI,YAAqB,IAAM,YAAY,GAAG,qBAAqB,GAAG,SAAU;AAE9G;;AAEG;AACH,OAAO,eAAe,SAAS,CAC7B,QAA4B,EAC5B,OAAe,EACf,WAAmB,EACnB,QAAmB,EAAA;EAEnB,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,CAAA,CAAE;EACV;EACD,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,CAAC;EACrD,MAAM,GAAG,OAAO,CAAC,GAA0B,MAAM,QAAQ,CAAC,SAAS,CACjE,QAAQ,CAAC,GAAG,CAAC;IAAA,IAAC;MAAE,OAAO;MAAE;IAAI,CAAE;IAAA,OAAK,CAAC,OAAO,EAAE,IAAI,CAAC;EAAA,EAAC,EACpD;IAAE,QAAQ,EAAE;EAAW,CAAE,CAC1B;EACD,OAAO,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC;AACxC;AAEA;;AAEG;AACH,OAAO,eAAe,qBAAqB,CACzC,QAA4B,EAC5B,OAAe,EACf,WAAmB,EACnB,QAAmB,EAAA;EAEnB,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,CAAA,CAAE;EACV;EACD,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,CAClC;IACE,EAAE,EAAE,OAAO;IACX,IAAI,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC;MAAA,IAAC;QAAE,OAAO;QAAE;MAAI,CAAE;MAAA,OAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IAAA,EAAC;GAC3E,EACD,WAAW,CACZ;EACD,MAAM,GAAG,OAAO,CAAC,GAAG,eAAe,CAAC,QAAQ,CAAC;EAC7C,OAAO,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC;AACxC;AAEA,SAAS,YAAY,CAAC,OAAiB,EAAE,QAAmB,EAAA;;EAC1D,MAAM,KAAK,GAAe,CAAA,CAAE;EAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACxC,MAAM;MAAE,OAAO;MAAE;IAAI,CAAE,GAAG,QAAQ,CAAC,CAAC,CAAC;IACrC,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;IACzB,MAAM,eAAe,GAAG,CAAA,EAAA,GAAA,KAAK,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,CAAE;IAC5C,eAAe,CAAC,IAAI,CAAC,GAAG;MAAE,KAAK,EAAE,MAAM;MAAE,OAAO,EAAE;IAAI,CAAE;IACxD,KAAK,CAAC,OAAO,CAAC,GAAG,eAAe;EACjC;EACD,OAAO,KAAK;AACd","sourceRoot":"","sourcesContent":["import { Contract } from 'ethers';\nimport { encodeAggregate, decodeAggregate } from '../../../abi/multicall';\nconst ABI = [\n    'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n];\n/**\n * @public\n */\nexport const multicall1Factory = (fastEncoding) => (fastEncoding ? fastEncodingMulticall : multicall);\n/**\n * @public\n */\nexport async function multicall(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const [, results] = await contract.aggregate(requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    return decodeResult(results, requests);\n}\n/**\n * @public\n */\nexport async function fastEncodingMulticall(provider, address, blockNumber, requests) {\n    if (requests.length === 0) {\n        return {};\n    }\n    const response = await provider.call({\n        to: address,\n        data: encodeAggregate(requests.map(({ address, data }) => [address, data])),\n    }, blockNumber);\n    const [, results] = decodeAggregate(response);\n    return decodeResult(results, requests);\n}\nfunction decodeResult(results, requests) {\n    var _a;\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const result = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = { value: result, success: true };\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall.js.map"]},"metadata":{},"sourceType":"module"}