{"ast":null,"code":"import { ethers } from 'ethers';\nexport const getSignerFromOptions = (provider, options, library) => {\n  const privateKey = options && 'privateKey' in options && options.privateKey;\n  const mnemonicPhrase = options && 'mnemonicPhrase' in options && options.mnemonicPhrase;\n  const json = options && 'json' in options && options.json;\n  const password = options && 'password' in options && options.password;\n  const privateKeySigner = privateKey && provider && new ethers.Wallet(privateKey, provider);\n  const mnemonicPhraseSigner = mnemonicPhrase && provider && ethers.Wallet.fromMnemonic(mnemonicPhrase).connect(provider);\n  const encryptedJsonSigner = json && password && provider && ethers.Wallet.fromEncryptedJsonSync(json, password).connect(provider);\n  const optionsSigner = options && 'signer' in options && options.signer;\n  return privateKeySigner || mnemonicPhraseSigner || encryptedJsonSigner || optionsSigner || (library === null || library === void 0 ? void 0 : library.getSigner());\n};","map":{"version":3,"sources":["../../../../src/helpers/getSignerFromOptions.ts"],"names":[],"mappings":"AAAA,SAAS,MAAM,QAAmB,QAAQ;AAM1C,OAAO,MAAM,oBAAoB,GAAG,CAClC,QAAsB,EACtB,OAA4B,EAC5B,OAAyB,KACvB;EACF,MAAM,UAAU,GAAG,OAAO,IAAI,YAAY,IAAI,OAAO,IAAI,OAAO,CAAC,UAAU;EAC3E,MAAM,cAAc,GAAG,OAAO,IAAI,gBAAgB,IAAI,OAAO,IAAI,OAAO,CAAC,cAAc;EACvF,MAAM,IAAI,GAAG,OAAO,IAAI,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI;EACzD,MAAM,QAAQ,GAAG,OAAO,IAAI,UAAU,IAAI,OAAO,IAAI,OAAO,CAAC,QAAQ;EAErE,MAAM,gBAAgB,GAAG,UAAU,IAAI,QAAQ,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC;EAC1F,MAAM,oBAAoB,GACxB,cAAc,IAAI,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;EAC5F,MAAM,mBAAmB,GACvB,IAAI,IAAI,QAAQ,IAAI,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;EAEvG,MAAM,aAAa,GAAG,OAAO,IAAI,QAAQ,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM;EAEtE,OAAO,gBAAgB,IAAI,oBAAoB,IAAI,mBAAmB,IAAI,aAAa,KAAI,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,SAAS,EAAE,CAAA;AACjH,CAAC","sourceRoot":"","sourcesContent":["import { ethers } from 'ethers';\nexport const getSignerFromOptions = (provider, options, library) => {\n    const privateKey = options && 'privateKey' in options && options.privateKey;\n    const mnemonicPhrase = options && 'mnemonicPhrase' in options && options.mnemonicPhrase;\n    const json = options && 'json' in options && options.json;\n    const password = options && 'password' in options && options.password;\n    const privateKeySigner = privateKey && provider && new ethers.Wallet(privateKey, provider);\n    const mnemonicPhraseSigner = mnemonicPhrase && provider && ethers.Wallet.fromMnemonic(mnemonicPhrase).connect(provider);\n    const encryptedJsonSigner = json && password && provider && ethers.Wallet.fromEncryptedJsonSync(json, password).connect(provider);\n    const optionsSigner = options && 'signer' in options && options.signer;\n    return privateKeySigner || mnemonicPhraseSigner || encryptedJsonSigner || optionsSigner || (library === null || library === void 0 ? void 0 : library.getSigner());\n};\n//# sourceMappingURL=getSignerFromOptions.js.map"]},"metadata":{},"sourceType":"module"}