{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls.map(call => Object.assign(Object.assign({}, call), {\n      address: call.address.toLowerCase()\n    }))];\n  } else if (action.type === 'UPDATE_CALLS') {\n    return state.map(call => {\n      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n        return call;\n      }\n      const blockNumber = action.blockNumber;\n      return Object.assign(Object.assign({}, call), {\n        lastUpdatedBlockNumber: blockNumber\n      });\n    });\n  } else {\n    let finalState = state;\n    for (const call of action.calls) {\n      const index = finalState.findIndex(x => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index);\n      }\n    }\n    return finalState;\n  }\n}","map":{"version":3,"sources":["../../../../../../src/providers/chainState/common/callsReducer.ts"],"names":[],"mappings":"AA+CA;;AAEG;AACH,OAAM,SAAU,YAAY,GAAsC;EAAA,IAArC,KAAA,uEAAmB,EAAE;EAAA,IAAE,MAAc;EAChE,IAAI,MAAM,CAAC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO,CAAC,GAAG,KAAK,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAE,IAAI,IAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAM,IAAI,CAAA,EAAA;MAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;IAAE,CAAA,CAAG,CAAC,CAAC;GACrG,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,cAAc,EAAE;IACzC,OAAO,KAAK,CAAC,GAAG,CAAE,IAAI,IAAI;MACxB,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC1E,OAAO,IAAI;MACZ;MACD,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW;MACtC,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAY,IAAI,CAAA,EAAA;QAAE,sBAAsB,EAAE;MAAW,CAAA,CAAA;IACvD,CAAC,CAAC;GACH,MAAM;IACL,IAAI,UAAU,GAAG,KAAK;IACtB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;MAC/B,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAC/B,CAAC,IAAK,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CACtF;MACD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC;MACtD;IACF;IACD,OAAO,UAAU;EAClB;AACH","sourceRoot":"","sourcesContent":["/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer(state = [], action) {\n    if (action.type === 'ADD_CALLS') {\n        return [...state, ...action.calls.map((call) => (Object.assign(Object.assign({}, call), { address: call.address.toLowerCase() })))];\n    }\n    else if (action.type === 'UPDATE_CALLS') {\n        return state.map((call) => {\n            if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {\n                return call;\n            }\n            const blockNumber = action.blockNumber;\n            return Object.assign(Object.assign({}, call), { lastUpdatedBlockNumber: blockNumber });\n        });\n    }\n    else {\n        let finalState = state;\n        for (const call of action.calls) {\n            const index = finalState.findIndex((x) => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);\n            if (index !== -1) {\n                finalState = finalState.filter((_, i) => i !== index);\n            }\n        }\n        return finalState;\n    }\n}\n//# sourceMappingURL=callsReducer.js.map"]},"metadata":{},"sourceType":"module"}