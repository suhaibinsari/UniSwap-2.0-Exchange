"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var chai_1 = require("chai");
var ethereum_waffle_1 = require("ethereum-waffle");
var constants_1 = require("../constants");
var MultiCall2_json_1 = __importDefault(require("../constants/abi/MultiCall2.json"));
var hooks_1 = require("../hooks");
var testing_1 = require("../testing");
var ethers_1 = require("ethers");
var ganache_1 = __importDefault(require("ganache"));
describe('useCall Resilency tests', function () {
    var _loop_1 = function (multicallVersion) {
        var _loop_2 = function (fastMulticallEncoding) {
            describe("Multicall v".concat(multicallVersion, " configured: fastMulticallEncoding=").concat(fastMulticallEncoding), function () {
                it('Other hooks work when one call reverts', function () {
                    var _a, _b, _c, _d, _e;
                    return __awaiter(this, void 0, void 0, function () {
                        var _f, config, network1, revertContract, doublerContract, _g, result, waitForCurrent;
                        return __generator(this, function (_h) {
                            switch (_h.label) {
                                case 0:
                                    if (multicallVersion === 1)
                                        this.skip(); // This cannot work in multicall 1 as the whole batch reverts.
                                    return [4 /*yield*/, (0, testing_1.setupTestingConfig)({ multicallVersion: multicallVersion })];
                                case 1:
                                    _f = _h.sent(), config = _f.config, network1 = _f.network1;
                                    return [4 /*yield*/, (0, ethereum_waffle_1.deployContract)(network1.deployer, constants_1.reverterContractABI)];
                                case 2:
                                    revertContract = _h.sent();
                                    return [4 /*yield*/, (0, ethereum_waffle_1.deployContract)(network1.deployer, constants_1.doublerContractABI)];
                                case 3:
                                    doublerContract = _h.sent();
                                    return [4 /*yield*/, (0, testing_1.renderDAppHook)(function () {
                                            var revertResult = (0, hooks_1.useCall)({
                                                contract: revertContract,
                                                method: 'doRevert',
                                                args: []
                                            });
                                            var doubleResult = (0, hooks_1.useCall)({
                                                contract: doublerContract,
                                                method: 'double',
                                                args: [3]
                                            });
                                            return { revertResult: revertResult, doubleResult: doubleResult };
                                        }, {
                                            config: __assign(__assign({}, config), { fastMulticallEncoding: fastMulticallEncoding })
                                        })];
                                case 4:
                                    _g = _h.sent(), result = _g.result, waitForCurrent = _g.waitForCurrent;
                                    return [4 /*yield*/, waitForCurrent(function (val) { return val.doubleResult !== undefined && val.revertResult !== undefined; })];
                                case 5:
                                    _h.sent();
                                    (0, chai_1.expect)((_a = result.current.revertResult) === null || _a === void 0 ? void 0 : _a.error).to.not.be.undefined;
                                    (0, chai_1.expect)((_b = result.current.doubleResult) === null || _b === void 0 ? void 0 : _b.error).to.be.undefined;
                                    (0, chai_1.expect)((_e = (_d = (_c = result.current.doubleResult) === null || _c === void 0 ? void 0 : _c.value) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.eq(6)).to.be["true"];
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
                it('Continues to work when one call stops reverting', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var _a, config, network1, revertContract, doublerContract, _b, result, waitForCurrent, rerender;
                    var _c, _d, _e, _f, _g, _h;
                    return __generator(this, function (_j) {
                        switch (_j.label) {
                            case 0: return [4 /*yield*/, (0, testing_1.setupTestingConfig)({ multicallVersion: multicallVersion })];
                            case 1:
                                _a = _j.sent(), config = _a.config, network1 = _a.network1;
                                return [4 /*yield*/, (0, ethereum_waffle_1.deployContract)(network1.deployer, constants_1.reverterContractABI)];
                            case 2:
                                revertContract = _j.sent();
                                return [4 /*yield*/, (0, ethereum_waffle_1.deployContract)(network1.deployer, constants_1.doublerContractABI)];
                            case 3:
                                doublerContract = _j.sent();
                                return [4 /*yield*/, (0, testing_1.renderDAppHook)(function (num) {
                                        var revertResult = (0, hooks_1.useCall)({
                                            contract: revertContract,
                                            method: 'revertOnOdd',
                                            args: [num]
                                        });
                                        var doubleResult = (0, hooks_1.useCall)({
                                            contract: doublerContract,
                                            method: 'double',
                                            args: [num]
                                        });
                                        return { revertResult: revertResult, doubleResult: doubleResult };
                                    }, {
                                        config: config,
                                        renderHook: {
                                            initialProps: 5
                                        }
                                    })];
                            case 4:
                                _b = _j.sent(), result = _b.result, waitForCurrent = _b.waitForCurrent, rerender = _b.rerender;
                                return [4 /*yield*/, waitForCurrent(function (val) { return val.doubleResult !== undefined && val.revertResult !== undefined; })];
                            case 5:
                                _j.sent();
                                if (multicallVersion !== 1) {
                                    // This cannot work in multicall 1 as the whole batch reverts.
                                    (0, chai_1.expect)((_e = (_d = (_c = result.current.doubleResult) === null || _c === void 0 ? void 0 : _c.value) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.eq(10)).to.be["true"];
                                }
                                (0, chai_1.expect)((_f = result.current.revertResult) === null || _f === void 0 ? void 0 : _f.error).to.not.be.undefined;
                                rerender(4);
                                return [4 /*yield*/, waitForCurrent(function (val) { var _a, _b, _c; return (_c = (_b = (_a = val.doubleResult) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.eq(8); })];
                            case 6:
                                _j.sent();
                                (0, chai_1.expect)((_g = result.current.doubleResult) === null || _g === void 0 ? void 0 : _g.error).to.be.undefined;
                                (0, chai_1.expect)((_h = result.current.revertResult) === null || _h === void 0 ? void 0 : _h.error).to.be.undefined;
                                return [2 /*return*/];
                        }
                    });
                }); });
                describe('Multichain with RPC servers', function () {
                    var ganacheServers;
                    var miners;
                    var config;
                    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                        var multicall0, multicall1;
                        var _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    ganacheServers = [
                                        ganache_1["default"].server({
                                            chain: { chainId: 1337 },
                                            logging: { quiet: true },
                                            wallet: { accounts: ethereum_waffle_1.defaultAccounts }
                                        }),
                                        ganache_1["default"].server({
                                            chain: { chainId: 31337 },
                                            logging: { quiet: true },
                                            wallet: { accounts: ethereum_waffle_1.defaultAccounts }
                                        }),
                                    ];
                                    return [4 /*yield*/, ganacheServers[0].listen(18800)];
                                case 1:
                                    _c.sent();
                                    return [4 /*yield*/, ganacheServers[1].listen(18801)];
                                case 2:
                                    _c.sent();
                                    miners = [
                                        new ethers_1.Wallet(ethereum_waffle_1.defaultAccounts[0].secretKey, new ethers_1.providers.StaticJsonRpcProvider('http://localhost:18800')),
                                        new ethers_1.Wallet(ethereum_waffle_1.defaultAccounts[0].secretKey, new ethers_1.providers.StaticJsonRpcProvider('http://localhost:18801')),
                                    ];
                                    return [4 /*yield*/, (0, ethereum_waffle_1.deployContract)(miners[0], MultiCall2_json_1["default"])];
                                case 3:
                                    multicall0 = _c.sent();
                                    return [4 /*yield*/, (0, ethereum_waffle_1.deployContract)(miners[1], MultiCall2_json_1["default"])];
                                case 4:
                                    multicall1 = _c.sent();
                                    config = {
                                        readOnlyChainId: 1337,
                                        readOnlyUrls: (_a = {},
                                            _a[1337] = 'http://localhost:18800',
                                            _a[31337] = 'http://localhost:18801',
                                            _a),
                                        pollingInterval: 200,
                                        multicallAddresses: (_b = {},
                                            _b[1337] = multicall0.address,
                                            _b[31337] = multicall1.address,
                                            _b)
                                    };
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    afterEach(function () { return __awaiter(void 0, void 0, void 0, function () {
                        var _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    _c.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, ganacheServers[0].close()];
                                case 1:
                                    _c.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    _a = _c.sent();
                                    return [3 /*break*/, 3];
                                case 3:
                                    _c.trys.push([3, 5, , 6]);
                                    return [4 /*yield*/, ganacheServers[1].close()];
                                case 4:
                                    _c.sent();
                                    return [3 /*break*/, 6];
                                case 5:
                                    _b = _c.sent();
                                    return [3 /*break*/, 6];
                                case 6: return [2 /*return*/];
                            }
                        });
                    }); });
                    it('Continues to work when *secondary* RPC endpoint fails', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var _a, result, waitForCurrent;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, (0, testing_1.renderDAppHook)(function () {
                                        var _a = (0, hooks_1.useEthers)(), chainId = _a.chainId, error = _a.error;
                                        var firstChainBlockNumber = (0, hooks_1.useBlockMeta)({ chainId: 1337 }).blockNumber;
                                        var secondChainBlockNumber = (0, hooks_1.useBlockMeta)({ chainId: 31337 }).blockNumber;
                                        return { chainId: chainId, secondChainBlockNumber: secondChainBlockNumber, firstChainBlockNumber: firstChainBlockNumber, error: error };
                                    }, {
                                        config: config
                                    })];
                                case 1:
                                    _a = _b.sent(), result = _a.result, waitForCurrent = _a.waitForCurrent;
                                    return [4 /*yield*/, waitForCurrent(function (val) {
                                            return val.chainId !== undefined &&
                                                val.secondChainBlockNumber !== undefined &&
                                                val.firstChainBlockNumber !== undefined;
                                        })];
                                case 2:
                                    _b.sent();
                                    (0, chai_1.expect)(result.current.chainId).to.be.equal(1337);
                                    (0, chai_1.expect)(result.current.secondChainBlockNumber).to.be.equal(1);
                                    (0, chai_1.expect)(result.current.firstChainBlockNumber).to.be.equal(1);
                                    return [4 /*yield*/, ganacheServers[1].close()]; // Secondary, as in NOT the `readOnlyChainId` one.
                                case 3:
                                    _b.sent(); // Secondary, as in NOT the `readOnlyChainId` one.
                                    return [4 /*yield*/, miners[0].sendTransaction({ to: ethers_1.constants.AddressZero })];
                                case 4:
                                    _b.sent();
                                    return [4 /*yield*/, waitForCurrent(function (val) { return val.firstChainBlockNumber === 2; })];
                                case 5:
                                    _b.sent();
                                    return [4 /*yield*/, waitForCurrent(function (val) { return !!val.error; })];
                                case 6:
                                    _b.sent();
                                    (0, chai_1.expect)(result.current.firstChainBlockNumber).to.be.equal(2);
                                    (0, chai_1.expect)(result.current.secondChainBlockNumber).to.be.equal(1);
                                    (0, chai_1.expect)(result.current.chainId).to.be.equal(1337);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    it('Continues to work when *primary* RPC endpoint fails', function () { return __awaiter(void 0, void 0, void 0, function () {
                        var _a, result, waitForCurrent;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, (0, testing_1.renderDAppHook)(function () {
                                        var _a = (0, hooks_1.useEthers)(), chainId = _a.chainId, error = _a.error;
                                        var firstChainBlockNumber = (0, hooks_1.useBlockMeta)({ chainId: 1337 }).blockNumber;
                                        var secondChainBlockNumber = (0, hooks_1.useBlockMeta)({ chainId: 31337 }).blockNumber;
                                        return { chainId: chainId, secondChainBlockNumber: secondChainBlockNumber, firstChainBlockNumber: firstChainBlockNumber, error: error };
                                    }, {
                                        config: config
                                    })];
                                case 1:
                                    _a = _b.sent(), result = _a.result, waitForCurrent = _a.waitForCurrent;
                                    return [4 /*yield*/, waitForCurrent(function (val) {
                                            return val.chainId !== undefined &&
                                                val.secondChainBlockNumber !== undefined &&
                                                val.firstChainBlockNumber !== undefined;
                                        })];
                                case 2:
                                    _b.sent();
                                    (0, chai_1.expect)(result.current.chainId).to.be.equal(1337);
                                    (0, chai_1.expect)(result.current.secondChainBlockNumber).to.be.equal(1);
                                    (0, chai_1.expect)(result.current.firstChainBlockNumber).to.be.equal(1);
                                    return [4 /*yield*/, ganacheServers[0].close()]; // Primary, as in the `readOnlyChainId` one.
                                case 3:
                                    _b.sent(); // Primary, as in the `readOnlyChainId` one.
                                    return [4 /*yield*/, miners[1].sendTransaction({ to: ethers_1.constants.AddressZero })];
                                case 4:
                                    _b.sent();
                                    return [4 /*yield*/, waitForCurrent(function (val) { return val.secondChainBlockNumber === 2; })];
                                case 5:
                                    _b.sent();
                                    return [4 /*yield*/, waitForCurrent(function (val) { return !!val.error; })];
                                case 6:
                                    _b.sent();
                                    (0, chai_1.expect)(result.current.firstChainBlockNumber).to.be.equal(1);
                                    (0, chai_1.expect)(result.current.secondChainBlockNumber).to.be.equal(2);
                                    (0, chai_1.expect)(result.current.chainId).to.be.equal(1337);
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                });
            });
        };
        for (var _b = 0, _c = [false, true]; _b < _c.length; _b++) {
            var fastMulticallEncoding = _c[_b];
            _loop_2(fastMulticallEncoding);
        }
    };
    for (var _i = 0, _a = [1, 2]; _i < _a.length; _i++) {
        var multicallVersion = _a[_i];
        _loop_1(multicallVersion);
    }
});
//# sourceMappingURL=useCallResilency.test.js.map