"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.createMockProvider = void 0;
var ethereum_waffle_1 = require("ethereum-waffle");
var ethers_1 = require("ethers");
var constants_1 = require("../../constants");
var deployMulticall_1 = require("./deployMulticall");
var mineBlock_1 = require("./mineBlock");
var generateRandomWallets = function () {
    var balance = '0x1ED09BEAD87C0378D8E6400000000'; // 10^34
    var wallets = [];
    for (var i = 0; i < 10; i++) {
        wallets.push(ethers_1.Wallet.createRandom());
    }
    return wallets.map(function (w) { return ({ balance: balance, secretKey: w.privateKey }); });
};
/**
 * Creates a MockProvider, with an option to override `chainId`.
 * Automatically deploys multicall.
 */
var createMockProvider = function (opts) {
    if (opts === void 0) { opts = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var chainId, provider, multicallAddresses, _a, deployer, wallets;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    chainId = (_b = opts.chainId) !== null && _b !== void 0 ? _b : constants_1.ChainId.Mainnet;
                    provider = new ethereum_waffle_1.MockProvider({
                        ganacheOptions: { chain: { chainId: chainId }, wallet: { accounts: generateRandomWallets() } }
                    });
                    return [4 /*yield*/, (opts.multicallVersion === 2
                            ? (0, deployMulticall_1.deployMulticall2)(provider, chainId)
                            : (0, deployMulticall_1.deployMulticall)(provider, chainId))];
                case 1:
                    multicallAddresses = _c.sent();
                    _a = provider.getWallets(), deployer = _a[0], wallets = _a.slice(1);
                    return [2 /*return*/, {
                            provider: provider,
                            multicallAddresses: multicallAddresses,
                            wallets: wallets,
                            deployer: deployer,
                            chainId: chainId,
                            mineBlock: function () { return (0, mineBlock_1.mineBlock)(provider); }
                        }];
            }
        });
    });
};
exports.createMockProvider = createMockProvider;
//# sourceMappingURL=createMockProvider.js.map